=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi
  class APIsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add scope to API application
    # Add a scope to an API application.  <div>   <code>create:api_application_scopes</code> </div> 
    # @param api_id [String] API ID
    # @param application_id [String] Application ID
    # @param scope_id [String] Scope ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_api_application_scope(api_id, application_id, scope_id, opts = {})
      add_api_application_scope_with_http_info(api_id, application_id, scope_id, opts)
      nil
    end

    # Add scope to API application
    # Add a scope to an API application.  &lt;div&gt;   &lt;code&gt;create:api_application_scopes&lt;/code&gt; &lt;/div&gt; 
    # @param api_id [String] API ID
    # @param application_id [String] Application ID
    # @param scope_id [String] Scope ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_api_application_scope_with_http_info(api_id, application_id, scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIsApi.add_api_application_scope ...'
      end
      # verify the required parameter 'api_id' is set
      if @api_client.config.client_side_validation && api_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_id' when calling APIsApi.add_api_application_scope"
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling APIsApi.add_api_application_scope"
      end
      # verify the required parameter 'scope_id' is set
      if @api_client.config.client_side_validation && scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'scope_id' when calling APIsApi.add_api_application_scope"
      end
      # resource path
      local_var_path = '/api/v1/apis/{api_id}/applications/{application_id}/scopes/{scope_id}'.sub('{' + 'api_id' + '}', CGI.escape(api_id.to_s)).sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s)).sub('{' + 'scope_id' + '}', CGI.escape(scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"APIsApi.add_api_application_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIsApi#add_api_application_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create API scope
    # Create a new API scope.  <div>   <code>create:api_scopes</code> </div> 
    # @param api_id [String] API ID
    # @param add_api_scope_request [AddAPIScopeRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateApiScopesResponse]
    def add_api_scope(api_id, add_api_scope_request, opts = {})
      data, _status_code, _headers = add_api_scope_with_http_info(api_id, add_api_scope_request, opts)
      data
    end

    # Create API scope
    # Create a new API scope.  &lt;div&gt;   &lt;code&gt;create:api_scopes&lt;/code&gt; &lt;/div&gt; 
    # @param api_id [String] API ID
    # @param add_api_scope_request [AddAPIScopeRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateApiScopesResponse, Integer, Hash)>] CreateApiScopesResponse data, response status code and response headers
    def add_api_scope_with_http_info(api_id, add_api_scope_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIsApi.add_api_scope ...'
      end
      # verify the required parameter 'api_id' is set
      if @api_client.config.client_side_validation && api_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_id' when calling APIsApi.add_api_scope"
      end
      # verify the required parameter 'add_api_scope_request' is set
      if @api_client.config.client_side_validation && add_api_scope_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_api_scope_request' when calling APIsApi.add_api_scope"
      end
      # resource path
      local_var_path = '/api/v1/apis/{api_id}/scopes'.sub('{' + 'api_id' + '}', CGI.escape(api_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_api_scope_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateApiScopesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"APIsApi.add_api_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIsApi#add_api_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create API
    # Register a new API. For more information read [Register and manage APIs](https://docs.kinde.com/developer-tools/your-apis/register-manage-apis/).  <div>   <code>create:apis</code> </div> 
    # @param add_apis_request [AddAPIsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateApisResponse]
    def add_apis(add_apis_request, opts = {})
      data, _status_code, _headers = add_apis_with_http_info(add_apis_request, opts)
      data
    end

    # Create API
    # Register a new API. For more information read [Register and manage APIs](https://docs.kinde.com/developer-tools/your-apis/register-manage-apis/).  &lt;div&gt;   &lt;code&gt;create:apis&lt;/code&gt; &lt;/div&gt; 
    # @param add_apis_request [AddAPIsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateApisResponse, Integer, Hash)>] CreateApisResponse data, response status code and response headers
    def add_apis_with_http_info(add_apis_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIsApi.add_apis ...'
      end
      # verify the required parameter 'add_apis_request' is set
      if @api_client.config.client_side_validation && add_apis_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_apis_request' when calling APIsApi.add_apis"
      end
      # resource path
      local_var_path = '/api/v1/apis'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_apis_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateApisResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"APIsApi.add_apis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIsApi#add_apis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete API
    # Delete an API you previously created.  <div>   <code>delete:apis</code> </div> 
    # @param api_id [String] The API&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [DeleteApiResponse]
    def delete_api(api_id, opts = {})
      data, _status_code, _headers = delete_api_with_http_info(api_id, opts)
      data
    end

    # Delete API
    # Delete an API you previously created.  &lt;div&gt;   &lt;code&gt;delete:apis&lt;/code&gt; &lt;/div&gt; 
    # @param api_id [String] The API&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteApiResponse, Integer, Hash)>] DeleteApiResponse data, response status code and response headers
    def delete_api_with_http_info(api_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIsApi.delete_api ...'
      end
      # verify the required parameter 'api_id' is set
      if @api_client.config.client_side_validation && api_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_id' when calling APIsApi.delete_api"
      end
      # resource path
      local_var_path = '/api/v1/apis/{api_id}'.sub('{' + 'api_id' + '}', CGI.escape(api_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"APIsApi.delete_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIsApi#delete_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete API application scope
    # Delete an API application scope you previously created.  <div>   <code>delete:apis_application_scopes</code> </div> 
    # @param api_id [String] API ID
    # @param application_id [String] Application ID
    # @param scope_id [String] Scope ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_api_appliation_scope(api_id, application_id, scope_id, opts = {})
      delete_api_appliation_scope_with_http_info(api_id, application_id, scope_id, opts)
      nil
    end

    # Delete API application scope
    # Delete an API application scope you previously created.  &lt;div&gt;   &lt;code&gt;delete:apis_application_scopes&lt;/code&gt; &lt;/div&gt; 
    # @param api_id [String] API ID
    # @param application_id [String] Application ID
    # @param scope_id [String] Scope ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_api_appliation_scope_with_http_info(api_id, application_id, scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIsApi.delete_api_appliation_scope ...'
      end
      # verify the required parameter 'api_id' is set
      if @api_client.config.client_side_validation && api_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_id' when calling APIsApi.delete_api_appliation_scope"
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling APIsApi.delete_api_appliation_scope"
      end
      # verify the required parameter 'scope_id' is set
      if @api_client.config.client_side_validation && scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'scope_id' when calling APIsApi.delete_api_appliation_scope"
      end
      # resource path
      local_var_path = '/api/v1/apis/{api_id}/applications/{application_id}/scopes/{scope_id}'.sub('{' + 'api_id' + '}', CGI.escape(api_id.to_s)).sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s)).sub('{' + 'scope_id' + '}', CGI.escape(scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"APIsApi.delete_api_appliation_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIsApi#delete_api_appliation_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete API scope
    # Delete an API scope you previously created.  <div>   <code>delete:apis_scopes</code> </div> 
    # @param api_id [String] API ID
    # @param scope_id [String] Scope ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_api_scope(api_id, scope_id, opts = {})
      delete_api_scope_with_http_info(api_id, scope_id, opts)
      nil
    end

    # Delete API scope
    # Delete an API scope you previously created.  &lt;div&gt;   &lt;code&gt;delete:apis_scopes&lt;/code&gt; &lt;/div&gt; 
    # @param api_id [String] API ID
    # @param scope_id [String] Scope ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_api_scope_with_http_info(api_id, scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIsApi.delete_api_scope ...'
      end
      # verify the required parameter 'api_id' is set
      if @api_client.config.client_side_validation && api_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_id' when calling APIsApi.delete_api_scope"
      end
      # verify the required parameter 'scope_id' is set
      if @api_client.config.client_side_validation && scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'scope_id' when calling APIsApi.delete_api_scope"
      end
      # resource path
      local_var_path = '/api/v1/apis/{api_id}/scopes/{scope_id}'.sub('{' + 'api_id' + '}', CGI.escape(api_id.to_s)).sub('{' + 'scope_id' + '}', CGI.escape(scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"APIsApi.delete_api_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIsApi#delete_api_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get API
    # Retrieve API details by ID.  <div>   <code>read:apis</code> </div> 
    # @param api_id [String] The API&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [GetApiResponse]
    def get_api(api_id, opts = {})
      data, _status_code, _headers = get_api_with_http_info(api_id, opts)
      data
    end

    # Get API
    # Retrieve API details by ID.  &lt;div&gt;   &lt;code&gt;read:apis&lt;/code&gt; &lt;/div&gt; 
    # @param api_id [String] The API&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetApiResponse, Integer, Hash)>] GetApiResponse data, response status code and response headers
    def get_api_with_http_info(api_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIsApi.get_api ...'
      end
      # verify the required parameter 'api_id' is set
      if @api_client.config.client_side_validation && api_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_id' when calling APIsApi.get_api"
      end
      # resource path
      local_var_path = '/api/v1/apis/{api_id}'.sub('{' + 'api_id' + '}', CGI.escape(api_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"APIsApi.get_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIsApi#get_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get API scope
    # Retrieve API scope by API ID.  <div>   <code>read:api_scopes</code> </div> 
    # @param api_id [String] API ID
    # @param scope_id [String] Scope ID
    # @param [Hash] opts the optional parameters
    # @return [GetApiScopeResponse]
    def get_api_scope(api_id, scope_id, opts = {})
      data, _status_code, _headers = get_api_scope_with_http_info(api_id, scope_id, opts)
      data
    end

    # Get API scope
    # Retrieve API scope by API ID.  &lt;div&gt;   &lt;code&gt;read:api_scopes&lt;/code&gt; &lt;/div&gt; 
    # @param api_id [String] API ID
    # @param scope_id [String] Scope ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetApiScopeResponse, Integer, Hash)>] GetApiScopeResponse data, response status code and response headers
    def get_api_scope_with_http_info(api_id, scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIsApi.get_api_scope ...'
      end
      # verify the required parameter 'api_id' is set
      if @api_client.config.client_side_validation && api_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_id' when calling APIsApi.get_api_scope"
      end
      # verify the required parameter 'scope_id' is set
      if @api_client.config.client_side_validation && scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'scope_id' when calling APIsApi.get_api_scope"
      end
      # resource path
      local_var_path = '/api/v1/apis/{api_id}/scopes/{scope_id}'.sub('{' + 'api_id' + '}', CGI.escape(api_id.to_s)).sub('{' + 'scope_id' + '}', CGI.escape(scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApiScopeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"APIsApi.get_api_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIsApi#get_api_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get API scopes
    # Retrieve API scopes by API ID.  <div>   <code>read:api_scopes</code> </div> 
    # @param api_id [String] API ID
    # @param [Hash] opts the optional parameters
    # @return [GetApiScopesResponse]
    def get_api_scopes(api_id, opts = {})
      data, _status_code, _headers = get_api_scopes_with_http_info(api_id, opts)
      data
    end

    # Get API scopes
    # Retrieve API scopes by API ID.  &lt;div&gt;   &lt;code&gt;read:api_scopes&lt;/code&gt; &lt;/div&gt; 
    # @param api_id [String] API ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetApiScopesResponse, Integer, Hash)>] GetApiScopesResponse data, response status code and response headers
    def get_api_scopes_with_http_info(api_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIsApi.get_api_scopes ...'
      end
      # verify the required parameter 'api_id' is set
      if @api_client.config.client_side_validation && api_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_id' when calling APIsApi.get_api_scopes"
      end
      # resource path
      local_var_path = '/api/v1/apis/{api_id}/scopes'.sub('{' + 'api_id' + '}', CGI.escape(api_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApiScopesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"APIsApi.get_api_scopes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIsApi#get_api_scopes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get APIs
    # Returns a list of your APIs. The APIs are returned sorted by name.  <div>   <code>read:apis</code> </div> 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;scopes\&quot;.
    # @return [GetApisResponse]
    def get_apis(opts = {})
      data, _status_code, _headers = get_apis_with_http_info(opts)
      data
    end

    # Get APIs
    # Returns a list of your APIs. The APIs are returned sorted by name.  &lt;div&gt;   &lt;code&gt;read:apis&lt;/code&gt; &lt;/div&gt; 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;scopes\&quot;.
    # @return [Array<(GetApisResponse, Integer, Hash)>] GetApisResponse data, response status code and response headers
    def get_apis_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIsApi.get_apis ...'
      end
      allowable_values = ["scopes"]
      if @api_client.config.client_side_validation && opts[:'expand'] && !allowable_values.include?(opts[:'expand'])
        fail ArgumentError, "invalid value for \"expand\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/apis'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApisResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"APIsApi.get_apis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIsApi#get_apis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Authorize API applications
    # Authorize applications to be allowed to request access tokens for an API  <div>   <code>update:apis</code> </div> 
    # @param api_id [String] The API&#39;s ID.
    # @param update_api_applications_request [UpdateAPIApplicationsRequest] The applications you want to authorize.
    # @param [Hash] opts the optional parameters
    # @return [AuthorizeAppApiResponse]
    def update_api_applications(api_id, update_api_applications_request, opts = {})
      data, _status_code, _headers = update_api_applications_with_http_info(api_id, update_api_applications_request, opts)
      data
    end

    # Authorize API applications
    # Authorize applications to be allowed to request access tokens for an API  &lt;div&gt;   &lt;code&gt;update:apis&lt;/code&gt; &lt;/div&gt; 
    # @param api_id [String] The API&#39;s ID.
    # @param update_api_applications_request [UpdateAPIApplicationsRequest] The applications you want to authorize.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthorizeAppApiResponse, Integer, Hash)>] AuthorizeAppApiResponse data, response status code and response headers
    def update_api_applications_with_http_info(api_id, update_api_applications_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIsApi.update_api_applications ...'
      end
      # verify the required parameter 'api_id' is set
      if @api_client.config.client_side_validation && api_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_id' when calling APIsApi.update_api_applications"
      end
      # verify the required parameter 'update_api_applications_request' is set
      if @api_client.config.client_side_validation && update_api_applications_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_api_applications_request' when calling APIsApi.update_api_applications"
      end
      # resource path
      local_var_path = '/api/v1/apis/{api_id}/applications'.sub('{' + 'api_id' + '}', CGI.escape(api_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_api_applications_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthorizeAppApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"APIsApi.update_api_applications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIsApi#update_api_applications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update API scope
    # Update an API scope.  <div>   <code>update:api_scopes</code> </div> 
    # @param api_id [String] API ID
    # @param scope_id [String] Scope ID
    # @param update_api_scope_request [UpdateAPIScopeRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_api_scope(api_id, scope_id, update_api_scope_request, opts = {})
      update_api_scope_with_http_info(api_id, scope_id, update_api_scope_request, opts)
      nil
    end

    # Update API scope
    # Update an API scope.  &lt;div&gt;   &lt;code&gt;update:api_scopes&lt;/code&gt; &lt;/div&gt; 
    # @param api_id [String] API ID
    # @param scope_id [String] Scope ID
    # @param update_api_scope_request [UpdateAPIScopeRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_api_scope_with_http_info(api_id, scope_id, update_api_scope_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIsApi.update_api_scope ...'
      end
      # verify the required parameter 'api_id' is set
      if @api_client.config.client_side_validation && api_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_id' when calling APIsApi.update_api_scope"
      end
      # verify the required parameter 'scope_id' is set
      if @api_client.config.client_side_validation && scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'scope_id' when calling APIsApi.update_api_scope"
      end
      # verify the required parameter 'update_api_scope_request' is set
      if @api_client.config.client_side_validation && update_api_scope_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_api_scope_request' when calling APIsApi.update_api_scope"
      end
      # resource path
      local_var_path = '/api/v1/apis/{api_id}/scopes/{scope_id}'.sub('{' + 'api_id' + '}', CGI.escape(api_id.to_s)).sub('{' + 'scope_id' + '}', CGI.escape(scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_api_scope_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"APIsApi.update_api_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIsApi#update_api_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
