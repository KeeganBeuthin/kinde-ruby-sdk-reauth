=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi
  class ApplicationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create application
    # Create a new client.  <div>   <code>create:applications</code> </div> 
    # @param create_application_request [CreateApplicationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateApplicationResponse]
    def create_application(create_application_request, opts = {})
      data, _status_code, _headers = create_application_with_http_info(create_application_request, opts)
      data
    end

    # Create application
    # Create a new client.  &lt;div&gt;   &lt;code&gt;create:applications&lt;/code&gt; &lt;/div&gt; 
    # @param create_application_request [CreateApplicationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateApplicationResponse, Integer, Hash)>] CreateApplicationResponse data, response status code and response headers
    def create_application_with_http_info(create_application_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.create_application ...'
      end
      # verify the required parameter 'create_application_request' is set
      if @api_client.config.client_side_validation && create_application_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_application_request' when calling ApplicationsApi.create_application"
      end
      # resource path
      local_var_path = '/api/v1/applications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_application_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateApplicationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.create_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#create_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete application
    # Delete a client / application.  <div>   <code>delete:applications</code> </div> 
    # @param application_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_application(application_id, opts = {})
      data, _status_code, _headers = delete_application_with_http_info(application_id, opts)
      data
    end

    # Delete application
    # Delete a client / application.  &lt;div&gt;   &lt;code&gt;delete:applications&lt;/code&gt; &lt;/div&gt; 
    # @param application_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_application_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.delete_application ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling ApplicationsApi.delete_application"
      end
      # resource path
      local_var_path = '/api/v1/applications/{application_id}'.sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.delete_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#delete_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable connection
    # Enable an auth connection for an application.  <div>   <code>create:application_connections</code> </div> 
    # @param application_id [String] The identifier/client ID for the application.
    # @param connection_id [String] The identifier for the connection.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_connection(application_id, connection_id, opts = {})
      enable_connection_with_http_info(application_id, connection_id, opts)
      nil
    end

    # Enable connection
    # Enable an auth connection for an application.  &lt;div&gt;   &lt;code&gt;create:application_connections&lt;/code&gt; &lt;/div&gt; 
    # @param application_id [String] The identifier/client ID for the application.
    # @param connection_id [String] The identifier for the connection.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enable_connection_with_http_info(application_id, connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.enable_connection ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling ApplicationsApi.enable_connection"
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ApplicationsApi.enable_connection"
      end
      # resource path
      local_var_path = '/api/v1/applications/{application_id}/connections/{connection_id}'.sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s)).sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.enable_connection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#enable_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get application
    # Gets an application given the application's ID.  <div>   <code>read:applications</code> </div> 
    # @param application_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [GetApplicationResponse]
    def get_application(application_id, opts = {})
      data, _status_code, _headers = get_application_with_http_info(application_id, opts)
      data
    end

    # Get application
    # Gets an application given the application&#39;s ID.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
    # @param application_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetApplicationResponse, Integer, Hash)>] GetApplicationResponse data, response status code and response headers
    def get_application_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.get_application ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling ApplicationsApi.get_application"
      end
      # resource path
      local_var_path = '/api/v1/applications/{application_id}'.sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApplicationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.get_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#get_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get connections
    # Gets all connections for an application.  <div>   <code>read:application_connections</code> </div> 
    # @param application_id [String] The identifier/client ID for the application.
    # @param [Hash] opts the optional parameters
    # @return [GetConnectionsResponse]
    def get_application_connections(application_id, opts = {})
      data, _status_code, _headers = get_application_connections_with_http_info(application_id, opts)
      data
    end

    # Get connections
    # Gets all connections for an application.  &lt;div&gt;   &lt;code&gt;read:application_connections&lt;/code&gt; &lt;/div&gt; 
    # @param application_id [String] The identifier/client ID for the application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetConnectionsResponse, Integer, Hash)>] GetConnectionsResponse data, response status code and response headers
    def get_application_connections_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.get_application_connections ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling ApplicationsApi.get_application_connections"
      end
      # resource path
      local_var_path = '/api/v1/applications/{application_id}/connections'.sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetConnectionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.get_application_connections",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#get_application_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get property values
    # Gets properties for an application by client ID.  <div>   <code>read:application_properties</code> </div> 
    # @param application_id [String] The application&#39;s ID / client ID.
    # @param [Hash] opts the optional parameters
    # @return [GetPropertyValuesResponse]
    def get_application_property_values(application_id, opts = {})
      data, _status_code, _headers = get_application_property_values_with_http_info(application_id, opts)
      data
    end

    # Get property values
    # Gets properties for an application by client ID.  &lt;div&gt;   &lt;code&gt;read:application_properties&lt;/code&gt; &lt;/div&gt; 
    # @param application_id [String] The application&#39;s ID / client ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPropertyValuesResponse, Integer, Hash)>] GetPropertyValuesResponse data, response status code and response headers
    def get_application_property_values_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.get_application_property_values ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling ApplicationsApi.get_application_property_values"
      end
      # resource path
      local_var_path = '/api/v1/applications/{application_id}/properties'.sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPropertyValuesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.get_application_property_values",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#get_application_property_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get applications
    # Get a list of applications / clients.  <div>   <code>read:applications</code> </div> 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [GetApplicationsResponse]
    def get_applications(opts = {})
      data, _status_code, _headers = get_applications_with_http_info(opts)
      data
    end

    # Get applications
    # Get a list of applications / clients.  &lt;div&gt;   &lt;code&gt;read:applications&lt;/code&gt; &lt;/div&gt; 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [Array<(GetApplicationsResponse, Integer, Hash)>] GetApplicationsResponse data, response status code and response headers
    def get_applications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.get_applications ...'
      end
      allowable_values = ["name_asc", "name_desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/applications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_token'] = opts[:'next_token'] if !opts[:'next_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApplicationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.get_applications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#get_applications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove connection
    # Turn off an auth connection for an application  <div>   <code>delete:application_connections</code> </div> 
    # @param application_id [String] The identifier/client ID for the application.
    # @param connection_id [String] The identifier for the connection.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def remove_connection(application_id, connection_id, opts = {})
      data, _status_code, _headers = remove_connection_with_http_info(application_id, connection_id, opts)
      data
    end

    # Remove connection
    # Turn off an auth connection for an application  &lt;div&gt;   &lt;code&gt;delete:application_connections&lt;/code&gt; &lt;/div&gt; 
    # @param application_id [String] The identifier/client ID for the application.
    # @param connection_id [String] The identifier for the connection.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def remove_connection_with_http_info(application_id, connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.remove_connection ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling ApplicationsApi.remove_connection"
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ApplicationsApi.remove_connection"
      end
      # resource path
      local_var_path = '/api/v1/applications/{application_id}/connections/{connection_id}'.sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s)).sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.remove_connection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#remove_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Application
    # Updates a client's settings. For more information, read [Applications in Kinde](https://docs.kinde.com/build/applications/about-applications)  <div>   <code>update:applications</code> </div> 
    # @param application_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateApplicationRequest] :update_application_request Application details.
    # @return [nil]
    def update_application(application_id, opts = {})
      update_application_with_http_info(application_id, opts)
      nil
    end

    # Update Application
    # Updates a client&#39;s settings. For more information, read [Applications in Kinde](https://docs.kinde.com/build/applications/about-applications)  &lt;div&gt;   &lt;code&gt;update:applications&lt;/code&gt; &lt;/div&gt; 
    # @param application_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateApplicationRequest] :update_application_request Application details.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_application_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.update_application ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling ApplicationsApi.update_application"
      end
      # resource path
      local_var_path = '/api/v1/applications/{application_id}'.sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_application_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.update_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#update_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update application tokens
    # Configure tokens for an application.   <div>     <code>update:application_tokens</code>   </div> 
    # @param application_id [String] The identifier/client ID for the application.
    # @param update_application_tokens_request [UpdateApplicationTokensRequest] Application tokens.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_application_tokens(application_id, update_application_tokens_request, opts = {})
      data, _status_code, _headers = update_application_tokens_with_http_info(application_id, update_application_tokens_request, opts)
      data
    end

    # Update application tokens
    # Configure tokens for an application.   &lt;div&gt;     &lt;code&gt;update:application_tokens&lt;/code&gt;   &lt;/div&gt; 
    # @param application_id [String] The identifier/client ID for the application.
    # @param update_application_tokens_request [UpdateApplicationTokensRequest] Application tokens.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_application_tokens_with_http_info(application_id, update_application_tokens_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.update_application_tokens ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling ApplicationsApi.update_application_tokens"
      end
      # verify the required parameter 'update_application_tokens_request' is set
      if @api_client.config.client_side_validation && update_application_tokens_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_application_tokens_request' when calling ApplicationsApi.update_application_tokens"
      end
      # resource path
      local_var_path = '/api/v1/applications/{application_id}/tokens'.sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_application_tokens_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.update_application_tokens",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#update_application_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update property
    # Update application property value.  <div>   <code>update:application_properties</code> </div> 
    # @param application_id [String] The application&#39;s ID / client ID.
    # @param property_key [String] The property&#39;s key.
    # @param update_applications_property_request [UpdateApplicationsPropertyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_applications_property(application_id, property_key, update_applications_property_request, opts = {})
      data, _status_code, _headers = update_applications_property_with_http_info(application_id, property_key, update_applications_property_request, opts)
      data
    end

    # Update property
    # Update application property value.  &lt;div&gt;   &lt;code&gt;update:application_properties&lt;/code&gt; &lt;/div&gt; 
    # @param application_id [String] The application&#39;s ID / client ID.
    # @param property_key [String] The property&#39;s key.
    # @param update_applications_property_request [UpdateApplicationsPropertyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_applications_property_with_http_info(application_id, property_key, update_applications_property_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.update_applications_property ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling ApplicationsApi.update_applications_property"
      end
      # verify the required parameter 'property_key' is set
      if @api_client.config.client_side_validation && property_key.nil?
        fail ArgumentError, "Missing the required parameter 'property_key' when calling ApplicationsApi.update_applications_property"
      end
      # verify the required parameter 'update_applications_property_request' is set
      if @api_client.config.client_side_validation && update_applications_property_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_applications_property_request' when calling ApplicationsApi.update_applications_property"
      end
      # resource path
      local_var_path = '/api/v1/applications/{application_id}/properties/{property_key}'.sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s)).sub('{' + 'property_key' + '}', CGI.escape(property_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_applications_property_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsApi.update_applications_property",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#update_applications_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
