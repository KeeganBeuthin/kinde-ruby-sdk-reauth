=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi
  class EnvironmentVariablesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create environment variable
    # Create a new environment variable. This feature is in beta and admin UI is not yet available.  <div>   <code>create:environment_variables</code> </div> 
    # @param create_environment_variable_request [CreateEnvironmentVariableRequest] The environment variable details.
    # @param [Hash] opts the optional parameters
    # @return [CreateEnvironmentVariableResponse]
    def create_environment_variable(create_environment_variable_request, opts = {})
      data, _status_code, _headers = create_environment_variable_with_http_info(create_environment_variable_request, opts)
      data
    end

    # Create environment variable
    # Create a new environment variable. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;create:environment_variables&lt;/code&gt; &lt;/div&gt; 
    # @param create_environment_variable_request [CreateEnvironmentVariableRequest] The environment variable details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateEnvironmentVariableResponse, Integer, Hash)>] CreateEnvironmentVariableResponse data, response status code and response headers
    def create_environment_variable_with_http_info(create_environment_variable_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentVariablesApi.create_environment_variable ...'
      end
      # verify the required parameter 'create_environment_variable_request' is set
      if @api_client.config.client_side_validation && create_environment_variable_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_environment_variable_request' when calling EnvironmentVariablesApi.create_environment_variable"
      end
      # resource path
      local_var_path = '/api/v1/environment_variables'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_environment_variable_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateEnvironmentVariableResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentVariablesApi.create_environment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentVariablesApi#create_environment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete environment variable
    # Delete an environment variable you previously created. This feature is in beta and admin UI is not yet available.  <div>   <code>delete:environment_variables</code> </div> 
    # @param variable_id [String] The environment variable&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [DeleteEnvironmentVariableResponse]
    def delete_environment_variable(variable_id, opts = {})
      data, _status_code, _headers = delete_environment_variable_with_http_info(variable_id, opts)
      data
    end

    # Delete environment variable
    # Delete an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;delete:environment_variables&lt;/code&gt; &lt;/div&gt; 
    # @param variable_id [String] The environment variable&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteEnvironmentVariableResponse, Integer, Hash)>] DeleteEnvironmentVariableResponse data, response status code and response headers
    def delete_environment_variable_with_http_info(variable_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentVariablesApi.delete_environment_variable ...'
      end
      # verify the required parameter 'variable_id' is set
      if @api_client.config.client_side_validation && variable_id.nil?
        fail ArgumentError, "Missing the required parameter 'variable_id' when calling EnvironmentVariablesApi.delete_environment_variable"
      end
      # resource path
      local_var_path = '/api/v1/environment_variables/{variable_id}'.sub('{' + 'variable_id' + '}', CGI.escape(variable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteEnvironmentVariableResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentVariablesApi.delete_environment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentVariablesApi#delete_environment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get environment variable
    # Retrieve environment variable details by ID. This feature is in beta and admin UI is not yet available.  <div>   <code>read:environment_variables</code> </div> 
    # @param variable_id [String] The environment variable&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [GetEnvironmentVariableResponse]
    def get_environment_variable(variable_id, opts = {})
      data, _status_code, _headers = get_environment_variable_with_http_info(variable_id, opts)
      data
    end

    # Get environment variable
    # Retrieve environment variable details by ID. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
    # @param variable_id [String] The environment variable&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnvironmentVariableResponse, Integer, Hash)>] GetEnvironmentVariableResponse data, response status code and response headers
    def get_environment_variable_with_http_info(variable_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentVariablesApi.get_environment_variable ...'
      end
      # verify the required parameter 'variable_id' is set
      if @api_client.config.client_side_validation && variable_id.nil?
        fail ArgumentError, "Missing the required parameter 'variable_id' when calling EnvironmentVariablesApi.get_environment_variable"
      end
      # resource path
      local_var_path = '/api/v1/environment_variables/{variable_id}'.sub('{' + 'variable_id' + '}', CGI.escape(variable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnvironmentVariableResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentVariablesApi.get_environment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentVariablesApi#get_environment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get environment variables
    # Get environment variables. This feature is in beta and admin UI is not yet available.  <div>   <code>read:environment_variables</code> </div> 
    # @param [Hash] opts the optional parameters
    # @return [GetEnvironmentVariablesResponse]
    def get_environment_variables(opts = {})
      data, _status_code, _headers = get_environment_variables_with_http_info(opts)
      data
    end

    # Get environment variables
    # Get environment variables. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;read:environment_variables&lt;/code&gt; &lt;/div&gt; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnvironmentVariablesResponse, Integer, Hash)>] GetEnvironmentVariablesResponse data, response status code and response headers
    def get_environment_variables_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentVariablesApi.get_environment_variables ...'
      end
      # resource path
      local_var_path = '/api/v1/environment_variables'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnvironmentVariablesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentVariablesApi.get_environment_variables",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentVariablesApi#get_environment_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update environment variable
    # Update an environment variable you previously created. This feature is in beta and admin UI is not yet available.  <div>   <code>update:environment_variables</code> </div> 
    # @param variable_id [String] The environment variable&#39;s ID.
    # @param update_environment_variable_request [UpdateEnvironmentVariableRequest] The new details for the environment variable
    # @param [Hash] opts the optional parameters
    # @return [UpdateEnvironmentVariableResponse]
    def update_environment_variable(variable_id, update_environment_variable_request, opts = {})
      data, _status_code, _headers = update_environment_variable_with_http_info(variable_id, update_environment_variable_request, opts)
      data
    end

    # Update environment variable
    # Update an environment variable you previously created. This feature is in beta and admin UI is not yet available.  &lt;div&gt;   &lt;code&gt;update:environment_variables&lt;/code&gt; &lt;/div&gt; 
    # @param variable_id [String] The environment variable&#39;s ID.
    # @param update_environment_variable_request [UpdateEnvironmentVariableRequest] The new details for the environment variable
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateEnvironmentVariableResponse, Integer, Hash)>] UpdateEnvironmentVariableResponse data, response status code and response headers
    def update_environment_variable_with_http_info(variable_id, update_environment_variable_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentVariablesApi.update_environment_variable ...'
      end
      # verify the required parameter 'variable_id' is set
      if @api_client.config.client_side_validation && variable_id.nil?
        fail ArgumentError, "Missing the required parameter 'variable_id' when calling EnvironmentVariablesApi.update_environment_variable"
      end
      # verify the required parameter 'update_environment_variable_request' is set
      if @api_client.config.client_side_validation && update_environment_variable_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_environment_variable_request' when calling EnvironmentVariablesApi.update_environment_variable"
      end
      # resource path
      local_var_path = '/api/v1/environment_variables/{variable_id}'.sub('{' + 'variable_id' + '}', CGI.escape(variable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_environment_variable_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateEnvironmentVariableResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"EnvironmentVariablesApi.update_environment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentVariablesApi#update_environment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
