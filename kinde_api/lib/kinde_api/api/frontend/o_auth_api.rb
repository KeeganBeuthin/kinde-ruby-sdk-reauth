=begin
#Kinde Account API

# Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK. 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi::Frontend
  class OAuthApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get user profile
    # This endpoint returns a user's ID, names, profile picture URL and email of the currently logged in user. 
    # @param [Hash] opts the optional parameters
    # @return [UserProfileV2]
    def get_user_profile_v2(opts = {})
      data, _status_code, _headers = get_user_profile_v2_with_http_info(opts)
      data
    end

    # Get user profile
    # This endpoint returns a user&#39;s ID, names, profile picture URL and email of the currently logged in user. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserProfileV2, Integer, Hash)>] UserProfileV2 data, response status code and response headers
    def get_user_profile_v2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApi.get_user_profile_v2 ...'
      end
      # resource path
      local_var_path = '/oauth2/v2/user_profile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserProfileV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OAuthApi.get_user_profile_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApi#get_user_profile_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Introspect
    # Retrieve information about the provided token.
    # @param token [String] The token to be introspected.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token_type_hint A hint about the token type being queried in the request.
    # @return [TokenIntrospect]
    def token_introspection(token, opts = {})
      data, _status_code, _headers = token_introspection_with_http_info(token, opts)
      data
    end

    # Introspect
    # Retrieve information about the provided token.
    # @param token [String] The token to be introspected.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token_type_hint A hint about the token type being queried in the request.
    # @return [Array<(TokenIntrospect, Integer, Hash)>] TokenIntrospect data, response status code and response headers
    def token_introspection_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApi.token_introspection ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling OAuthApi.token_introspection"
      end
      allowable_values = ["access_token", "refresh_token"]
      if @api_client.config.client_side_validation && opts[:'token_type_hint'] && !allowable_values.include?(opts[:'token_type_hint'])
        fail ArgumentError, "invalid value for \"token_type_hint\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/oauth2/introspect'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['token'] = token
      form_params['token_type_hint'] = opts[:'token_type_hint'] if !opts[:'token_type_hint'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TokenIntrospect'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OAuthApi.token_introspection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApi#token_introspection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke token
    # Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
    # @param client_id [String] The &#x60;client_id&#x60; of your application.
    # @param token [String] The token to be revoked.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_secret The &#x60;client_secret&#x60; of your application. Required for backend apps only.
    # @option opts [String] :token_type_hint The type of token to be revoked.
    # @return [nil]
    def token_revocation(client_id, token, opts = {})
      token_revocation_with_http_info(client_id, token, opts)
      nil
    end

    # Revoke token
    # Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
    # @param client_id [String] The &#x60;client_id&#x60; of your application.
    # @param token [String] The token to be revoked.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_secret The &#x60;client_secret&#x60; of your application. Required for backend apps only.
    # @option opts [String] :token_type_hint The type of token to be revoked.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def token_revocation_with_http_info(client_id, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApi.token_revocation ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling OAuthApi.token_revocation"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling OAuthApi.token_revocation"
      end
      allowable_values = ["access_token", "refresh_token"]
      if @api_client.config.client_side_validation && opts[:'token_type_hint'] && !allowable_values.include?(opts[:'token_type_hint'])
        fail ArgumentError, "invalid value for \"token_type_hint\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/oauth2/revoke'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['client_id'] = client_id
      form_params['token'] = token
      form_params['client_secret'] = opts[:'client_secret'] if !opts[:'client_secret'].nil?
      form_params['token_type_hint'] = opts[:'token_type_hint'] if !opts[:'token_type_hint'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OAuthApi.token_revocation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApi#token_revocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
