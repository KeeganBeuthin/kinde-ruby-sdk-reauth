=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi
  class IdentitiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete identity
    # Delete identity by ID.  <div>   <code>delete:identities</code> </div> 
    # @param identity_id [String] The unique identifier for the identity.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_identity(identity_id, opts = {})
      data, _status_code, _headers = delete_identity_with_http_info(identity_id, opts)
      data
    end

    # Delete identity
    # Delete identity by ID.  &lt;div&gt;   &lt;code&gt;delete:identities&lt;/code&gt; &lt;/div&gt; 
    # @param identity_id [String] The unique identifier for the identity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_identity_with_http_info(identity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentitiesApi.delete_identity ...'
      end
      # verify the required parameter 'identity_id' is set
      if @api_client.config.client_side_validation && identity_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_id' when calling IdentitiesApi.delete_identity"
      end
      # resource path
      local_var_path = '/api/v1/identities/{identity_id}'.sub('{' + 'identity_id' + '}', CGI.escape(identity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"IdentitiesApi.delete_identity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentitiesApi#delete_identity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get identity
    # Returns an identity by ID  <div>   <code>read:identities</code> </div> 
    # @param identity_id [String] The unique identifier for the identity.
    # @param [Hash] opts the optional parameters
    # @return [Identity]
    def get_identity(identity_id, opts = {})
      data, _status_code, _headers = get_identity_with_http_info(identity_id, opts)
      data
    end

    # Get identity
    # Returns an identity by ID  &lt;div&gt;   &lt;code&gt;read:identities&lt;/code&gt; &lt;/div&gt; 
    # @param identity_id [String] The unique identifier for the identity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Identity, Integer, Hash)>] Identity data, response status code and response headers
    def get_identity_with_http_info(identity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentitiesApi.get_identity ...'
      end
      # verify the required parameter 'identity_id' is set
      if @api_client.config.client_side_validation && identity_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_id' when calling IdentitiesApi.get_identity"
      end
      # resource path
      local_var_path = '/api/v1/identities/{identity_id}'.sub('{' + 'identity_id' + '}', CGI.escape(identity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Identity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"IdentitiesApi.get_identity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentitiesApi#get_identity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update identity
    # Update identity by ID.  <div>   <code>update:identities</code> </div> 
    # @param identity_id [String] The unique identifier for the identity.
    # @param update_identity_request [UpdateIdentityRequest] The fields of the identity to update.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_identity(identity_id, update_identity_request, opts = {})
      data, _status_code, _headers = update_identity_with_http_info(identity_id, update_identity_request, opts)
      data
    end

    # Update identity
    # Update identity by ID.  &lt;div&gt;   &lt;code&gt;update:identities&lt;/code&gt; &lt;/div&gt; 
    # @param identity_id [String] The unique identifier for the identity.
    # @param update_identity_request [UpdateIdentityRequest] The fields of the identity to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_identity_with_http_info(identity_id, update_identity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentitiesApi.update_identity ...'
      end
      # verify the required parameter 'identity_id' is set
      if @api_client.config.client_side_validation && identity_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_id' when calling IdentitiesApi.update_identity"
      end
      # verify the required parameter 'update_identity_request' is set
      if @api_client.config.client_side_validation && update_identity_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_identity_request' when calling IdentitiesApi.update_identity"
      end
      # resource path
      local_var_path = '/api/v1/identities/{identity_id}'.sub('{' + 'identity_id' + '}', CGI.escape(identity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_identity_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"IdentitiesApi.update_identity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentitiesApi#update_identity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
