=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi
  class OrganizationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add organization logo
    # Add organization logo  <div>   <code>update:organizations</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param type [String] The type of logo to add.
    # @param logo [File] The logo file to upload.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def add_organization_logo(org_code, type, logo, opts = {})
      data, _status_code, _headers = add_organization_logo_with_http_info(org_code, type, logo, opts)
      data
    end

    # Add organization logo
    # Add organization logo  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param type [String] The type of logo to add.
    # @param logo [File] The logo file to upload.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def add_organization_logo_with_http_info(org_code, type, logo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.add_organization_logo ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.add_organization_logo"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling OrganizationsApi.add_organization_logo"
      end
      # verify enum value
      allowable_values = ["dark", "light"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'logo' is set
      if @api_client.config.client_side_validation && logo.nil?
        fail ArgumentError, "Missing the required parameter 'logo' when calling OrganizationsApi.add_organization_logo"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/logos/{type}'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'type' + '}', CGI.escape(type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['logo'] = logo

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.add_organization_logo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#add_organization_logo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add scope to organization user api
    # Add a scope to an organization user api.  <div>   <code>create:organization_user_api_scopes</code> </div> 
    # @param org_code [String] The identifier for the organization.
    # @param user_id [String] User ID
    # @param api_id [String] API ID
    # @param scope_id [String] Scope ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_organization_user_api_scope(org_code, user_id, api_id, scope_id, opts = {})
      add_organization_user_api_scope_with_http_info(org_code, user_id, api_id, scope_id, opts)
      nil
    end

    # Add scope to organization user api
    # Add a scope to an organization user api.  &lt;div&gt;   &lt;code&gt;create:organization_user_api_scopes&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization.
    # @param user_id [String] User ID
    # @param api_id [String] API ID
    # @param scope_id [String] Scope ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_organization_user_api_scope_with_http_info(org_code, user_id, api_id, scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.add_organization_user_api_scope ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.add_organization_user_api_scope"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.add_organization_user_api_scope"
      end
      # verify the required parameter 'api_id' is set
      if @api_client.config.client_side_validation && api_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_id' when calling OrganizationsApi.add_organization_user_api_scope"
      end
      # verify the required parameter 'scope_id' is set
      if @api_client.config.client_side_validation && scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'scope_id' when calling OrganizationsApi.add_organization_user_api_scope"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/apis/{api_id}/scopes/{scope_id}'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'api_id' + '}', CGI.escape(api_id.to_s)).sub('{' + 'scope_id' + '}', CGI.escape(scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.add_organization_user_api_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#add_organization_user_api_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Organization Users
    # Add existing users to an organization.  <div>   <code>create:organization_users</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @option opts [AddOrganizationUsersRequest] :add_organization_users_request 
    # @return [AddOrganizationUsersResponse]
    def add_organization_users(org_code, opts = {})
      data, _status_code, _headers = add_organization_users_with_http_info(org_code, opts)
      data
    end

    # Add Organization Users
    # Add existing users to an organization.  &lt;div&gt;   &lt;code&gt;create:organization_users&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @option opts [AddOrganizationUsersRequest] :add_organization_users_request 
    # @return [Array<(AddOrganizationUsersResponse, Integer, Hash)>] AddOrganizationUsersResponse data, response status code and response headers
    def add_organization_users_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.add_organization_users ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.add_organization_users"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_organization_users_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddOrganizationUsersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.add_organization_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#add_organization_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create organization
    # Create a new organization. To learn more read about [multi tenancy using organizations](https://docs.kinde.com/build/organizations/multi-tenancy-using-organizations/)  <div>   <code>create:organizations</code> </div> 
    # @param create_organization_request [CreateOrganizationRequest] Organization details.
    # @param [Hash] opts the optional parameters
    # @return [CreateOrganizationResponse]
    def create_organization(create_organization_request, opts = {})
      data, _status_code, _headers = create_organization_with_http_info(create_organization_request, opts)
      data
    end

    # Create organization
    # Create a new organization. To learn more read about [multi tenancy using organizations](https://docs.kinde.com/build/organizations/multi-tenancy-using-organizations/)  &lt;div&gt;   &lt;code&gt;create:organizations&lt;/code&gt; &lt;/div&gt; 
    # @param create_organization_request [CreateOrganizationRequest] Organization details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateOrganizationResponse, Integer, Hash)>] CreateOrganizationResponse data, response status code and response headers
    def create_organization_with_http_info(create_organization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.create_organization ...'
      end
      # verify the required parameter 'create_organization_request' is set
      if @api_client.config.client_side_validation && create_organization_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_organization_request' when calling OrganizationsApi.create_organization"
      end
      # resource path
      local_var_path = '/api/v1/organization'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_organization_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateOrganizationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.create_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#create_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Organization User Permission
    # Add permission to an organization user.  <div>   <code>create:organization_user_permissions</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param create_organization_user_permission_request [CreateOrganizationUserPermissionRequest] Permission details.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def create_organization_user_permission(org_code, user_id, create_organization_user_permission_request, opts = {})
      data, _status_code, _headers = create_organization_user_permission_with_http_info(org_code, user_id, create_organization_user_permission_request, opts)
      data
    end

    # Add Organization User Permission
    # Add permission to an organization user.  &lt;div&gt;   &lt;code&gt;create:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param create_organization_user_permission_request [CreateOrganizationUserPermissionRequest] Permission details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def create_organization_user_permission_with_http_info(org_code, user_id, create_organization_user_permission_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.create_organization_user_permission ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.create_organization_user_permission"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.create_organization_user_permission"
      end
      # verify the required parameter 'create_organization_user_permission_request' is set
      if @api_client.config.client_side_validation && create_organization_user_permission_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_organization_user_permission_request' when calling OrganizationsApi.create_organization_user_permission"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/permissions'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_organization_user_permission_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.create_organization_user_permission",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#create_organization_user_permission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Organization User Role
    # Add role to an organization user.  <div>   <code>create:organization_user_roles</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param create_organization_user_role_request [CreateOrganizationUserRoleRequest] Role details.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def create_organization_user_role(org_code, user_id, create_organization_user_role_request, opts = {})
      data, _status_code, _headers = create_organization_user_role_with_http_info(org_code, user_id, create_organization_user_role_request, opts)
      data
    end

    # Add Organization User Role
    # Add role to an organization user.  &lt;div&gt;   &lt;code&gt;create:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param create_organization_user_role_request [CreateOrganizationUserRoleRequest] Role details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def create_organization_user_role_with_http_info(org_code, user_id, create_organization_user_role_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.create_organization_user_role ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.create_organization_user_role"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.create_organization_user_role"
      end
      # verify the required parameter 'create_organization_user_role_request' is set
      if @api_client.config.client_side_validation && create_organization_user_role_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_organization_user_role_request' when calling OrganizationsApi.create_organization_user_role"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/roles'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_organization_user_role_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.create_organization_user_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#create_organization_user_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Organization
    # Delete an organization.  <div>   <code>delete:organizations</code> </div> 
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_organization(org_code, opts = {})
      data, _status_code, _headers = delete_organization_with_http_info(org_code, opts)
      data
    end

    # Delete Organization
    # Delete an organization.  &lt;div&gt;   &lt;code&gt;delete:organizations&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_organization_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.delete_organization"
      end
      # resource path
      local_var_path = '/api/v1/organization/{org_code}'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.delete_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Organization Feature Flag Override
    # Delete organization feature flag override.  <div>   <code>delete:organization_feature_flags</code> </div> 
    # @param org_code [String] The identifier for the organization.
    # @param feature_flag_key [String] The identifier for the feature flag.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_organization_feature_flag_override(org_code, feature_flag_key, opts = {})
      data, _status_code, _headers = delete_organization_feature_flag_override_with_http_info(org_code, feature_flag_key, opts)
      data
    end

    # Delete Organization Feature Flag Override
    # Delete organization feature flag override.  &lt;div&gt;   &lt;code&gt;delete:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization.
    # @param feature_flag_key [String] The identifier for the feature flag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_organization_feature_flag_override_with_http_info(org_code, feature_flag_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization_feature_flag_override ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.delete_organization_feature_flag_override"
      end
      # verify the required parameter 'feature_flag_key' is set
      if @api_client.config.client_side_validation && feature_flag_key.nil?
        fail ArgumentError, "Missing the required parameter 'feature_flag_key' when calling OrganizationsApi.delete_organization_feature_flag_override"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'feature_flag_key' + '}', CGI.escape(feature_flag_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.delete_organization_feature_flag_override",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization_feature_flag_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Organization Feature Flag Overrides
    # Delete all organization feature flag overrides.  <div>   <code>delete:organization_feature_flags</code> </div> 
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_organization_feature_flag_overrides(org_code, opts = {})
      data, _status_code, _headers = delete_organization_feature_flag_overrides_with_http_info(org_code, opts)
      data
    end

    # Delete Organization Feature Flag Overrides
    # Delete all organization feature flag overrides.  &lt;div&gt;   &lt;code&gt;delete:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_organization_feature_flag_overrides_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization_feature_flag_overrides ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.delete_organization_feature_flag_overrides"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/feature_flags'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.delete_organization_feature_flag_overrides",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization_feature_flag_overrides\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete organization handle
    # Delete organization handle  <div>   <code>delete:organization_handles</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_organization_handle(org_code, opts = {})
      data, _status_code, _headers = delete_organization_handle_with_http_info(org_code, opts)
      data
    end

    # Delete organization handle
    # Delete organization handle  &lt;div&gt;   &lt;code&gt;delete:organization_handles&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_organization_handle_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization_handle ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.delete_organization_handle"
      end
      # resource path
      local_var_path = '/api/v1/organization/{org_code}/handle'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.delete_organization_handle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization_handle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete organization logo
    # Delete organization logo  <div>   <code>update:organizations</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param type [String] The type of logo to delete.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_organization_logo(org_code, type, opts = {})
      data, _status_code, _headers = delete_organization_logo_with_http_info(org_code, type, opts)
      data
    end

    # Delete organization logo
    # Delete organization logo  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param type [String] The type of logo to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_organization_logo_with_http_info(org_code, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization_logo ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.delete_organization_logo"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling OrganizationsApi.delete_organization_logo"
      end
      # verify enum value
      allowable_values = ["dark", "light"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/logos/{type}'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'type' + '}', CGI.escape(type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.delete_organization_logo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization_logo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete scope from organization user API
    # Delete a scope from an organization user api you previously created.  <div>   <code>delete:organization_user_api_scopes</code> </div> 
    # @param org_code [String] The identifier for the organization.
    # @param user_id [String] User ID
    # @param api_id [String] API ID
    # @param scope_id [String] Scope ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_organization_user_api_scope(org_code, user_id, api_id, scope_id, opts = {})
      delete_organization_user_api_scope_with_http_info(org_code, user_id, api_id, scope_id, opts)
      nil
    end

    # Delete scope from organization user API
    # Delete a scope from an organization user api you previously created.  &lt;div&gt;   &lt;code&gt;delete:organization_user_api_scopes&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization.
    # @param user_id [String] User ID
    # @param api_id [String] API ID
    # @param scope_id [String] Scope ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_organization_user_api_scope_with_http_info(org_code, user_id, api_id, scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization_user_api_scope ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.delete_organization_user_api_scope"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.delete_organization_user_api_scope"
      end
      # verify the required parameter 'api_id' is set
      if @api_client.config.client_side_validation && api_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_id' when calling OrganizationsApi.delete_organization_user_api_scope"
      end
      # verify the required parameter 'scope_id' is set
      if @api_client.config.client_side_validation && scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'scope_id' when calling OrganizationsApi.delete_organization_user_api_scope"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/apis/{api_id}/scopes/{scope_id}'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'api_id' + '}', CGI.escape(api_id.to_s)).sub('{' + 'scope_id' + '}', CGI.escape(scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.delete_organization_user_api_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization_user_api_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Organization User Permission
    # Delete permission for an organization user.  <div>   <code>delete:organization_user_permissions</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param permission_id [String] The permission id.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_organization_user_permission(org_code, user_id, permission_id, opts = {})
      data, _status_code, _headers = delete_organization_user_permission_with_http_info(org_code, user_id, permission_id, opts)
      data
    end

    # Delete Organization User Permission
    # Delete permission for an organization user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param permission_id [String] The permission id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_organization_user_permission_with_http_info(org_code, user_id, permission_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization_user_permission ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.delete_organization_user_permission"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.delete_organization_user_permission"
      end
      # verify the required parameter 'permission_id' is set
      if @api_client.config.client_side_validation && permission_id.nil?
        fail ArgumentError, "Missing the required parameter 'permission_id' when calling OrganizationsApi.delete_organization_user_permission"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/permissions/{permission_id}'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'permission_id' + '}', CGI.escape(permission_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.delete_organization_user_permission",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization_user_permission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Organization User Role
    # Delete role for an organization user.  <div>   <code>delete:organization_user_roles</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param role_id [String] The role id.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_organization_user_role(org_code, user_id, role_id, opts = {})
      data, _status_code, _headers = delete_organization_user_role_with_http_info(org_code, user_id, role_id, opts)
      data
    end

    # Delete Organization User Role
    # Delete role for an organization user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param role_id [String] The role id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_organization_user_role_with_http_info(org_code, user_id, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization_user_role ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.delete_organization_user_role"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.delete_organization_user_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrganizationsApi.delete_organization_user_role"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.delete_organization_user_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization_user_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable connection
    # Enable an auth connection for an organization.  <div>   <code>create:organization_connections</code> </div> 
    # @param organization_code [String] The unique code for the organization.
    # @param connection_id [String] The identifier for the connection.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_org_connection(organization_code, connection_id, opts = {})
      enable_org_connection_with_http_info(organization_code, connection_id, opts)
      nil
    end

    # Enable connection
    # Enable an auth connection for an organization.  &lt;div&gt;   &lt;code&gt;create:organization_connections&lt;/code&gt; &lt;/div&gt; 
    # @param organization_code [String] The unique code for the organization.
    # @param connection_id [String] The identifier for the connection.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enable_org_connection_with_http_info(organization_code, connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.enable_org_connection ...'
      end
      # verify the required parameter 'organization_code' is set
      if @api_client.config.client_side_validation && organization_code.nil?
        fail ArgumentError, "Missing the required parameter 'organization_code' when calling OrganizationsApi.enable_org_connection"
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling OrganizationsApi.enable_org_connection"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{organization_code}/connections/{connection_id}'.sub('{' + 'organization_code' + '}', CGI.escape(organization_code.to_s)).sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.enable_org_connection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#enable_org_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization user's MFA configuration
    # Get an organization user’s MFA configuration.  <div>   <code>read:organization_user_mfa</code> </div> 
    # @param org_code [String] The identifier for the organization.
    # @param user_id [String] The identifier for the user
    # @param [Hash] opts the optional parameters
    # @return [GetUserMfaResponse]
    def get_org_user_mfa(org_code, user_id, opts = {})
      data, _status_code, _headers = get_org_user_mfa_with_http_info(org_code, user_id, opts)
      data
    end

    # Get an organization user&#39;s MFA configuration
    # Get an organization user’s MFA configuration.  &lt;div&gt;   &lt;code&gt;read:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization.
    # @param user_id [String] The identifier for the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUserMfaResponse, Integer, Hash)>] GetUserMfaResponse data, response status code and response headers
    def get_org_user_mfa_with_http_info(org_code, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_org_user_mfa ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.get_org_user_mfa"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.get_org_user_mfa"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/mfa'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserMfaResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_org_user_mfa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_org_user_mfa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organization
    # Retrieve organization details by code.  <div>   <code>read:organizations</code> </div> 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code The organization&#39;s code.
    # @return [GetOrganizationResponse]
    def get_organization(opts = {})
      data, _status_code, _headers = get_organization_with_http_info(opts)
      data
    end

    # Get organization
    # Retrieve organization details by code.  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code The organization&#39;s code.
    # @return [Array<(GetOrganizationResponse, Integer, Hash)>] GetOrganizationResponse data, response status code and response headers
    def get_organization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization ...'
      end
      # resource path
      local_var_path = '/api/v1/organization'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get connections
    # Gets all connections for an organization.  <div>   <code>read:organization_connections</code> </div> 
    # @param organization_code [String] The organization code.
    # @param [Hash] opts the optional parameters
    # @return [GetConnectionsResponse]
    def get_organization_connections(organization_code, opts = {})
      data, _status_code, _headers = get_organization_connections_with_http_info(organization_code, opts)
      data
    end

    # Get connections
    # Gets all connections for an organization.  &lt;div&gt;   &lt;code&gt;read:organization_connections&lt;/code&gt; &lt;/div&gt; 
    # @param organization_code [String] The organization code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetConnectionsResponse, Integer, Hash)>] GetConnectionsResponse data, response status code and response headers
    def get_organization_connections_with_http_info(organization_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization_connections ...'
      end
      # verify the required parameter 'organization_code' is set
      if @api_client.config.client_side_validation && organization_code.nil?
        fail ArgumentError, "Missing the required parameter 'organization_code' when calling OrganizationsApi.get_organization_connections"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{organization_code}/connections'.sub('{' + 'organization_code' + '}', CGI.escape(organization_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetConnectionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_organization_connections",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Organization Feature Flags
    # Get all organization feature flags.  <div>   <code>read:organization_feature_flags</code> </div> 
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @return [GetOrganizationFeatureFlagsResponse]
    def get_organization_feature_flags(org_code, opts = {})
      data, _status_code, _headers = get_organization_feature_flags_with_http_info(org_code, opts)
      data
    end

    # List Organization Feature Flags
    # Get all organization feature flags.  &lt;div&gt;   &lt;code&gt;read:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetOrganizationFeatureFlagsResponse, Integer, Hash)>] GetOrganizationFeatureFlagsResponse data, response status code and response headers
    def get_organization_feature_flags_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization_feature_flags ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.get_organization_feature_flags"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/feature_flags'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationFeatureFlagsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_organization_feature_flags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization_feature_flags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Organization Property Values
    # Gets properties for an organization by org code.  <div>   <code>read:organization_properties</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @return [GetPropertyValuesResponse]
    def get_organization_property_values(org_code, opts = {})
      data, _status_code, _headers = get_organization_property_values_with_http_info(org_code, opts)
      data
    end

    # Get Organization Property Values
    # Gets properties for an organization by org code.  &lt;div&gt;   &lt;code&gt;read:organization_properties&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPropertyValuesResponse, Integer, Hash)>] GetPropertyValuesResponse data, response status code and response headers
    def get_organization_property_values_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization_property_values ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.get_organization_property_values"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/properties'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPropertyValuesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_organization_property_values",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization_property_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Organization User Permissions
    # Get permissions for an organization user.  <div>   <code>read:organization_user_permissions</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;roles\&quot;.
    # @return [GetOrganizationsUserPermissionsResponse]
    def get_organization_user_permissions(org_code, user_id, opts = {})
      data, _status_code, _headers = get_organization_user_permissions_with_http_info(org_code, user_id, opts)
      data
    end

    # List Organization User Permissions
    # Get permissions for an organization user.  &lt;div&gt;   &lt;code&gt;read:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;roles\&quot;.
    # @return [Array<(GetOrganizationsUserPermissionsResponse, Integer, Hash)>] GetOrganizationsUserPermissionsResponse data, response status code and response headers
    def get_organization_user_permissions_with_http_info(org_code, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization_user_permissions ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.get_organization_user_permissions"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.get_organization_user_permissions"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/permissions'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationsUserPermissionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_organization_user_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization_user_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Organization User Roles
    # Get roles for an organization user.  <div>   <code>read:organization_user_roles</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [GetOrganizationsUserRolesResponse]
    def get_organization_user_roles(org_code, user_id, opts = {})
      data, _status_code, _headers = get_organization_user_roles_with_http_info(org_code, user_id, opts)
      data
    end

    # List Organization User Roles
    # Get roles for an organization user.  &lt;div&gt;   &lt;code&gt;read:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetOrganizationsUserRolesResponse, Integer, Hash)>] GetOrganizationsUserRolesResponse data, response status code and response headers
    def get_organization_user_roles_with_http_info(org_code, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization_user_roles ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.get_organization_user_roles"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.get_organization_user_roles"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/roles'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationsUserRolesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_organization_user_roles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization_user_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organization users
    # Get user details for all members of an organization.  <div>   <code>read:organization_users</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @option opts [String] :permissions Filter by user permissions comma separated (where all match)
    # @option opts [String] :roles Filter by user roles comma separated (where all match)
    # @return [GetOrganizationUsersResponse]
    def get_organization_users(org_code, opts = {})
      data, _status_code, _headers = get_organization_users_with_http_info(org_code, opts)
      data
    end

    # Get organization users
    # Get user details for all members of an organization.  &lt;div&gt;   &lt;code&gt;read:organization_users&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @option opts [String] :permissions Filter by user permissions comma separated (where all match)
    # @option opts [String] :roles Filter by user roles comma separated (where all match)
    # @return [Array<(GetOrganizationUsersResponse, Integer, Hash)>] GetOrganizationUsersResponse data, response status code and response headers
    def get_organization_users_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization_users ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.get_organization_users"
      end
      allowable_values = ["name_asc", "name_desc", "email_asc", "email_desc", "id_asc", "id_desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_token'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'permissions'] = opts[:'permissions'] if !opts[:'permissions'].nil?
      query_params[:'roles'] = opts[:'roles'] if !opts[:'roles'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationUsersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_organization_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organizations
    # Get a list of organizations.  <div>   <code>read:organizations</code> </div> 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [GetOrganizationsResponse]
    def get_organizations(opts = {})
      data, _status_code, _headers = get_organizations_with_http_info(opts)
      data
    end

    # Get organizations
    # Get a list of organizations.  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [Array<(GetOrganizationsResponse, Integer, Hash)>] GetOrganizationsResponse data, response status code and response headers
    def get_organizations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organizations ...'
      end
      allowable_values = ["name_asc", "name_desc", "email_asc", "email_desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/organizations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_token'] = opts[:'next_token'] if !opts[:'next_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_organizations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read organization logo details
    # Read organization logo details  <div>   <code>read:organizations</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @return [ReadLogoResponse]
    def read_organization_logo(org_code, opts = {})
      data, _status_code, _headers = read_organization_logo_with_http_info(org_code, opts)
      data
    end

    # Read organization logo details
    # Read organization logo details  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReadLogoResponse, Integer, Hash)>] ReadLogoResponse data, response status code and response headers
    def read_organization_logo_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.read_organization_logo ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.read_organization_logo"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/logos'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReadLogoResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.read_organization_logo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#read_organization_logo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove connection
    # Turn off an auth connection for an organization  <div>   <code>delete:organization_connections</code> </div> 
    # @param organization_code [String] The unique code for the organization.
    # @param connection_id [String] The identifier for the connection.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def remove_org_connection(organization_code, connection_id, opts = {})
      data, _status_code, _headers = remove_org_connection_with_http_info(organization_code, connection_id, opts)
      data
    end

    # Remove connection
    # Turn off an auth connection for an organization  &lt;div&gt;   &lt;code&gt;delete:organization_connections&lt;/code&gt; &lt;/div&gt; 
    # @param organization_code [String] The unique code for the organization.
    # @param connection_id [String] The identifier for the connection.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def remove_org_connection_with_http_info(organization_code, connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.remove_org_connection ...'
      end
      # verify the required parameter 'organization_code' is set
      if @api_client.config.client_side_validation && organization_code.nil?
        fail ArgumentError, "Missing the required parameter 'organization_code' when calling OrganizationsApi.remove_org_connection"
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling OrganizationsApi.remove_org_connection"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{organization_code}/connections/{connection_id}'.sub('{' + 'organization_code' + '}', CGI.escape(organization_code.to_s)).sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.remove_org_connection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#remove_org_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Organization User
    # Remove user from an organization.  <div>   <code>delete:organization_users</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def remove_organization_user(org_code, user_id, opts = {})
      data, _status_code, _headers = remove_organization_user_with_http_info(org_code, user_id, opts)
      data
    end

    # Remove Organization User
    # Remove user from an organization.  &lt;div&gt;   &lt;code&gt;delete:organization_users&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def remove_organization_user_with_http_info(org_code, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.remove_organization_user ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.remove_organization_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.remove_organization_user"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.remove_organization_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#remove_organization_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace Organization MFA Configuration
    # Replace Organization MFA Configuration.  <div>   <code>update:organization_mfa</code> </div> 
    # @param org_code [String] The identifier for the organization
    # @param replace_organization_mfa_request [ReplaceOrganizationMFARequest] MFA details.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def replace_organization_mfa(org_code, replace_organization_mfa_request, opts = {})
      data, _status_code, _headers = replace_organization_mfa_with_http_info(org_code, replace_organization_mfa_request, opts)
      data
    end

    # Replace Organization MFA Configuration
    # Replace Organization MFA Configuration.  &lt;div&gt;   &lt;code&gt;update:organization_mfa&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization
    # @param replace_organization_mfa_request [ReplaceOrganizationMFARequest] MFA details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def replace_organization_mfa_with_http_info(org_code, replace_organization_mfa_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.replace_organization_mfa ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.replace_organization_mfa"
      end
      # verify the required parameter 'replace_organization_mfa_request' is set
      if @api_client.config.client_side_validation && replace_organization_mfa_request.nil?
        fail ArgumentError, "Missing the required parameter 'replace_organization_mfa_request' when calling OrganizationsApi.replace_organization_mfa"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/mfa'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(replace_organization_mfa_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.replace_organization_mfa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#replace_organization_mfa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset specific organization MFA for a user
    # Reset a specific organization MFA factor for a user.  <div>   <code>delete:organization_user_mfa</code> </div> 
    # @param org_code [String] The identifier for the organization.
    # @param user_id [String] The identifier for the user
    # @param factor_id [String] The identifier for the MFA factor
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def reset_org_user_mfa(org_code, user_id, factor_id, opts = {})
      data, _status_code, _headers = reset_org_user_mfa_with_http_info(org_code, user_id, factor_id, opts)
      data
    end

    # Reset specific organization MFA for a user
    # Reset a specific organization MFA factor for a user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization.
    # @param user_id [String] The identifier for the user
    # @param factor_id [String] The identifier for the MFA factor
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def reset_org_user_mfa_with_http_info(org_code, user_id, factor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.reset_org_user_mfa ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.reset_org_user_mfa"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.reset_org_user_mfa"
      end
      # verify the required parameter 'factor_id' is set
      if @api_client.config.client_side_validation && factor_id.nil?
        fail ArgumentError, "Missing the required parameter 'factor_id' when calling OrganizationsApi.reset_org_user_mfa"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/mfa/{factor_id}'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'factor_id' + '}', CGI.escape(factor_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.reset_org_user_mfa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#reset_org_user_mfa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset all organization MFA for a user
    # Reset all organization MFA factors for a user.  <div>   <code>delete:organization_user_mfa</code> </div> 
    # @param org_code [String] The identifier for the organization.
    # @param user_id [String] The identifier for the user
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def reset_org_user_mfa_all(org_code, user_id, opts = {})
      data, _status_code, _headers = reset_org_user_mfa_all_with_http_info(org_code, user_id, opts)
      data
    end

    # Reset all organization MFA for a user
    # Reset all organization MFA factors for a user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization.
    # @param user_id [String] The identifier for the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def reset_org_user_mfa_all_with_http_info(org_code, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.reset_org_user_mfa_all ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.reset_org_user_mfa_all"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationsApi.reset_org_user_mfa_all"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/mfa'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.reset_org_user_mfa_all",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#reset_org_user_mfa_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Organization
    # Update an organization.  <div>   <code>update:organizations</code> </div> 
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;billing\&quot;.
    # @option opts [UpdateOrganizationRequest] :update_organization_request Organization details.
    # @return [SuccessResponse]
    def update_organization(org_code, opts = {})
      data, _status_code, _headers = update_organization_with_http_info(org_code, opts)
      data
    end

    # Update Organization
    # Update an organization.  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;billing\&quot;.
    # @option opts [UpdateOrganizationRequest] :update_organization_request Organization details.
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_organization_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_organization ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.update_organization"
      end
      allowable_values = ["billing"]
      if @api_client.config.client_side_validation && opts[:'expand'] && !allowable_values.include?(opts[:'expand'])
        fail ArgumentError, "invalid value for \"expand\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/organization/{org_code}'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_organization_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.update_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Organization Feature Flag Override
    # Update organization feature flag override.  <div>   <code>update:organization_feature_flags</code> </div> 
    # @param org_code [String] The identifier for the organization
    # @param feature_flag_key [String] The identifier for the feature flag
    # @param value [String] Override value
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_organization_feature_flag_override(org_code, feature_flag_key, value, opts = {})
      data, _status_code, _headers = update_organization_feature_flag_override_with_http_info(org_code, feature_flag_key, value, opts)
      data
    end

    # Update Organization Feature Flag Override
    # Update organization feature flag override.  &lt;div&gt;   &lt;code&gt;update:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization
    # @param feature_flag_key [String] The identifier for the feature flag
    # @param value [String] Override value
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_organization_feature_flag_override_with_http_info(org_code, feature_flag_key, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_organization_feature_flag_override ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.update_organization_feature_flag_override"
      end
      # verify the required parameter 'feature_flag_key' is set
      if @api_client.config.client_side_validation && feature_flag_key.nil?
        fail ArgumentError, "Missing the required parameter 'feature_flag_key' when calling OrganizationsApi.update_organization_feature_flag_override"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling OrganizationsApi.update_organization_feature_flag_override"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'feature_flag_key' + '}', CGI.escape(feature_flag_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'value'] = value

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.update_organization_feature_flag_override",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_organization_feature_flag_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Organization Property values
    # Update organization property values.  <div>   <code>update:organization_properties</code> </div> 
    # @param org_code [String] The identifier for the organization
    # @param update_organization_properties_request [UpdateOrganizationPropertiesRequest] Properties to update.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_organization_properties(org_code, update_organization_properties_request, opts = {})
      data, _status_code, _headers = update_organization_properties_with_http_info(org_code, update_organization_properties_request, opts)
      data
    end

    # Update Organization Property values
    # Update organization property values.  &lt;div&gt;   &lt;code&gt;update:organization_properties&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization
    # @param update_organization_properties_request [UpdateOrganizationPropertiesRequest] Properties to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_organization_properties_with_http_info(org_code, update_organization_properties_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_organization_properties ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.update_organization_properties"
      end
      # verify the required parameter 'update_organization_properties_request' is set
      if @api_client.config.client_side_validation && update_organization_properties_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_organization_properties_request' when calling OrganizationsApi.update_organization_properties"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/properties'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_organization_properties_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.update_organization_properties",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_organization_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Organization Property value
    # Update organization property value.  <div>   <code>update:organization_properties</code> </div> 
    # @param org_code [String] The identifier for the organization
    # @param property_key [String] The identifier for the property
    # @param value [String] The new property value
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_organization_property(org_code, property_key, value, opts = {})
      data, _status_code, _headers = update_organization_property_with_http_info(org_code, property_key, value, opts)
      data
    end

    # Update Organization Property value
    # Update organization property value.  &lt;div&gt;   &lt;code&gt;update:organization_properties&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The identifier for the organization
    # @param property_key [String] The identifier for the property
    # @param value [String] The new property value
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_organization_property_with_http_info(org_code, property_key, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_organization_property ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.update_organization_property"
      end
      # verify the required parameter 'property_key' is set
      if @api_client.config.client_side_validation && property_key.nil?
        fail ArgumentError, "Missing the required parameter 'property_key' when calling OrganizationsApi.update_organization_property"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling OrganizationsApi.update_organization_property"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/properties/{property_key}'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s)).sub('{' + 'property_key' + '}', CGI.escape(property_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'value'] = value

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.update_organization_property",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_organization_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update organization session configuration
    # Update the organization's session configuration.  <div>   <code>update:organizations</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param update_organization_sessions_request [UpdateOrganizationSessionsRequest] Organization session configuration.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_organization_sessions(org_code, update_organization_sessions_request, opts = {})
      data, _status_code, _headers = update_organization_sessions_with_http_info(org_code, update_organization_sessions_request, opts)
      data
    end

    # Update organization session configuration
    # Update the organization&#39;s session configuration.  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param update_organization_sessions_request [UpdateOrganizationSessionsRequest] Organization session configuration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_organization_sessions_with_http_info(org_code, update_organization_sessions_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_organization_sessions ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.update_organization_sessions"
      end
      # verify the required parameter 'update_organization_sessions_request' is set
      if @api_client.config.client_side_validation && update_organization_sessions_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_organization_sessions_request' when calling OrganizationsApi.update_organization_sessions"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/sessions'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_organization_sessions_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.update_organization_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_organization_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Organization Users
    # Update users that belong to an organization.  <div>   <code>update:organization_users</code> </div> 
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrganizationUsersRequest] :update_organization_users_request 
    # @return [UpdateOrganizationUsersResponse]
    def update_organization_users(org_code, opts = {})
      data, _status_code, _headers = update_organization_users_with_http_info(org_code, opts)
      data
    end

    # Update Organization Users
    # Update users that belong to an organization.  &lt;div&gt;   &lt;code&gt;update:organization_users&lt;/code&gt; &lt;/div&gt; 
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrganizationUsersRequest] :update_organization_users_request 
    # @return [Array<(UpdateOrganizationUsersResponse, Integer, Hash)>] UpdateOrganizationUsersResponse data, response status code and response headers
    def update_organization_users_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_organization_users ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        fail ArgumentError, "Missing the required parameter 'org_code' when calling OrganizationsApi.update_organization_users"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users'.sub('{' + 'org_code' + '}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_organization_users_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateOrganizationUsersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.update_organization_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_organization_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
