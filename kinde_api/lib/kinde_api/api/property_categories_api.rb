=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi
  class PropertyCategoriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Category
    # Create category.  <div>   <code>create:property_categories</code> </div> 
    # @param create_category_request [CreateCategoryRequest] Category details.
    # @param [Hash] opts the optional parameters
    # @return [CreateCategoryResponse]
    def create_category(create_category_request, opts = {})
      data, _status_code, _headers = create_category_with_http_info(create_category_request, opts)
      data
    end

    # Create Category
    # Create category.  &lt;div&gt;   &lt;code&gt;create:property_categories&lt;/code&gt; &lt;/div&gt; 
    # @param create_category_request [CreateCategoryRequest] Category details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCategoryResponse, Integer, Hash)>] CreateCategoryResponse data, response status code and response headers
    def create_category_with_http_info(create_category_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertyCategoriesApi.create_category ...'
      end
      # verify the required parameter 'create_category_request' is set
      if @api_client.config.client_side_validation && create_category_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_category_request' when calling PropertyCategoriesApi.create_category"
      end
      # resource path
      local_var_path = '/api/v1/property_categories'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_category_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCategoryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"PropertyCategoriesApi.create_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertyCategoriesApi#create_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List categories
    # Returns a list of categories.  <div>   <code>read:property_categories</code> </div> 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :starting_after The ID of the category to start after.
    # @option opts [String] :ending_before The ID of the category to end before.
    # @option opts [String] :context Filter the results by User or Organization context
    # @return [GetCategoriesResponse]
    def get_categories(opts = {})
      data, _status_code, _headers = get_categories_with_http_info(opts)
      data
    end

    # List categories
    # Returns a list of categories.  &lt;div&gt;   &lt;code&gt;read:property_categories&lt;/code&gt; &lt;/div&gt; 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :starting_after The ID of the category to start after.
    # @option opts [String] :ending_before The ID of the category to end before.
    # @option opts [String] :context Filter the results by User or Organization context
    # @return [Array<(GetCategoriesResponse, Integer, Hash)>] GetCategoriesResponse data, response status code and response headers
    def get_categories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertyCategoriesApi.get_categories ...'
      end
      allowable_values = ["usr", "org"]
      if @api_client.config.client_side_validation && opts[:'context'] && !allowable_values.include?(opts[:'context'])
        fail ArgumentError, "invalid value for \"context\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/property_categories'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'starting_after'] = opts[:'starting_after'] if !opts[:'starting_after'].nil?
      query_params[:'ending_before'] = opts[:'ending_before'] if !opts[:'ending_before'].nil?
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCategoriesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"PropertyCategoriesApi.get_categories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertyCategoriesApi#get_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Category
    # Update category.  <div>   <code>update:property_categories</code> </div> 
    # @param category_id [String] The unique identifier for the category.
    # @param update_category_request [UpdateCategoryRequest] The fields of the category to update.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_category(category_id, update_category_request, opts = {})
      data, _status_code, _headers = update_category_with_http_info(category_id, update_category_request, opts)
      data
    end

    # Update Category
    # Update category.  &lt;div&gt;   &lt;code&gt;update:property_categories&lt;/code&gt; &lt;/div&gt; 
    # @param category_id [String] The unique identifier for the category.
    # @param update_category_request [UpdateCategoryRequest] The fields of the category to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_category_with_http_info(category_id, update_category_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertyCategoriesApi.update_category ...'
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling PropertyCategoriesApi.update_category"
      end
      # verify the required parameter 'update_category_request' is set
      if @api_client.config.client_side_validation && update_category_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_category_request' when calling PropertyCategoriesApi.update_category"
      end
      # resource path
      local_var_path = '/api/v1/property_categories/{category_id}'.sub('{' + 'category_id' + '}', CGI.escape(category_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_category_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"PropertyCategoriesApi.update_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertyCategoriesApi#update_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
