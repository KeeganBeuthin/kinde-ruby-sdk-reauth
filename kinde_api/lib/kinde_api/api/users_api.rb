=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create user
    # Creates a user record and optionally zero or more identities for the user. An example identity could be the email address of the user.  <div>   <code>create:users</code> </div> 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserRequest] :create_user_request The details of the user to create.
    # @return [CreateUserResponse]
    def create_user(opts = {})
      data, _status_code, _headers = create_user_with_http_info(opts)
      data
    end

    # Create user
    # Creates a user record and optionally zero or more identities for the user. An example identity could be the email address of the user.  &lt;div&gt;   &lt;code&gt;create:users&lt;/code&gt; &lt;/div&gt; 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserRequest] :create_user_request The details of the user to create.
    # @return [Array<(CreateUserResponse, Integer, Hash)>] CreateUserResponse data, response status code and response headers
    def create_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.create_user ...'
      end
      # resource path
      local_var_path = '/api/v1/user'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_user_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.create_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create identity
    # Creates an identity for a user.  <div>   <code>create:user_identities</code> </div> 
    # @param user_id [String] The user&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserIdentityRequest] :create_user_identity_request The identity details.
    # @return [CreateIdentityResponse]
    def create_user_identity(user_id, opts = {})
      data, _status_code, _headers = create_user_identity_with_http_info(user_id, opts)
      data
    end

    # Create identity
    # Creates an identity for a user.  &lt;div&gt;   &lt;code&gt;create:user_identities&lt;/code&gt; &lt;/div&gt; 
    # @param user_id [String] The user&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserIdentityRequest] :create_user_identity_request The identity details.
    # @return [Array<(CreateIdentityResponse, Integer, Hash)>] CreateIdentityResponse data, response status code and response headers
    def create_user_identity_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.create_user_identity ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.create_user_identity"
      end
      # resource path
      local_var_path = '/api/v1/users/{user_id}/identities'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_user_identity_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateIdentityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.create_user_identity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create_user_identity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete user
    # Delete a user record.  <div>   <code>delete:users</code> </div> 
    # @param id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :is_delete_profile Delete all data and remove the user&#39;s profile from all of Kinde, including the subscriber list
    # @return [SuccessResponse]
    def delete_user(id, opts = {})
      data, _status_code, _headers = delete_user_with_http_info(id, opts)
      data
    end

    # Delete user
    # Delete a user record.  &lt;div&gt;   &lt;code&gt;delete:users&lt;/code&gt; &lt;/div&gt; 
    # @param id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :is_delete_profile Delete all data and remove the user&#39;s profile from all of Kinde, including the subscriber list
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.delete_user"
      end
      # resource path
      local_var_path = '/api/v1/user'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'is_delete_profile'] = opts[:'is_delete_profile'] if !opts[:'is_delete_profile'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete user sessions
    # Invalidate user sessions.  <div>   <code>delete:user_sessions</code> </div> 
    # @param user_id [String] The identifier for the user
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_user_sessions(user_id, opts = {})
      data, _status_code, _headers = delete_user_sessions_with_http_info(user_id, opts)
      data
    end

    # Delete user sessions
    # Invalidate user sessions.  &lt;div&gt;   &lt;code&gt;delete:user_sessions&lt;/code&gt; &lt;/div&gt; 
    # @param user_id [String] The identifier for the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_user_sessions_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.delete_user_sessions ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.delete_user_sessions"
      end
      # resource path
      local_var_path = '/api/v1/users/{user_id}/sessions'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.delete_user_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_user_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user
    # Retrieve a user record.  <div>   <code>read:users</code> </div> 
    # @param id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;organizations\&quot; and/or \&quot;identities\&quot;.
    # @return [User]
    def get_user_data(id, opts = {})
      data, _status_code, _headers = get_user_data_with_http_info(id, opts)
      data
    end

    # Get user
    # Retrieve a user record.  &lt;div&gt;   &lt;code&gt;read:users&lt;/code&gt; &lt;/div&gt; 
    # @param id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;organizations\&quot; and/or \&quot;identities\&quot;.
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_user_data_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_data"
      end
      # resource path
      local_var_path = '/api/v1/user'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get identities
    # Gets a list of identities for an user by ID.  <div>   <code>read:user_identities</code> </div> 
    # @param user_id [String] The user&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :starting_after The ID of the identity to start after.
    # @option opts [String] :ending_before The ID of the identity to end before.
    # @return [GetIdentitiesResponse]
    def get_user_identities(user_id, opts = {})
      data, _status_code, _headers = get_user_identities_with_http_info(user_id, opts)
      data
    end

    # Get identities
    # Gets a list of identities for an user by ID.  &lt;div&gt;   &lt;code&gt;read:user_identities&lt;/code&gt; &lt;/div&gt; 
    # @param user_id [String] The user&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :starting_after The ID of the identity to start after.
    # @option opts [String] :ending_before The ID of the identity to end before.
    # @return [Array<(GetIdentitiesResponse, Integer, Hash)>] GetIdentitiesResponse data, response status code and response headers
    def get_user_identities_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_identities ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.get_user_identities"
      end
      # resource path
      local_var_path = '/api/v1/users/{user_id}/identities'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'starting_after'] = opts[:'starting_after'] if !opts[:'starting_after'].nil?
      query_params[:'ending_before'] = opts[:'ending_before'] if !opts[:'ending_before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIdentitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_identities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_identities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get property values
    # Gets properties for an user by ID.  <div>   <code>read:user_properties</code> </div> 
    # @param user_id [String] The user&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [GetPropertyValuesResponse]
    def get_user_property_values(user_id, opts = {})
      data, _status_code, _headers = get_user_property_values_with_http_info(user_id, opts)
      data
    end

    # Get property values
    # Gets properties for an user by ID.  &lt;div&gt;   &lt;code&gt;read:user_properties&lt;/code&gt; &lt;/div&gt; 
    # @param user_id [String] The user&#39;s ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPropertyValuesResponse, Integer, Hash)>] GetPropertyValuesResponse data, response status code and response headers
    def get_user_property_values_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_property_values ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.get_user_property_values"
      end
      # resource path
      local_var_path = '/api/v1/users/{user_id}/properties'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPropertyValuesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_property_values",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_property_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user sessions
    # Retrieve the list of active sessions for a specific user.  <div>   <code>read:user_sessions</code> </div> 
    # @param user_id [String] The identifier for the user
    # @param [Hash] opts the optional parameters
    # @return [GetUserSessionsResponse]
    def get_user_sessions(user_id, opts = {})
      data, _status_code, _headers = get_user_sessions_with_http_info(user_id, opts)
      data
    end

    # Get user sessions
    # Retrieve the list of active sessions for a specific user.  &lt;div&gt;   &lt;code&gt;read:user_sessions&lt;/code&gt; &lt;/div&gt; 
    # @param user_id [String] The identifier for the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUserSessionsResponse, Integer, Hash)>] GetUserSessionsResponse data, response status code and response headers
    def get_user_sessions_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_sessions ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.get_user_sessions"
      end
      # resource path
      local_var_path = '/api/v1/users/{user_id}/sessions'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserSessionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get users
    # The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.  <div>   <code>read:users</code> </div> 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :user_id Filter the results by User ID. The query string should be comma separated and url encoded.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @option opts [String] :email Filter the results by email address. The query string should be comma separated and url encoded.
    # @option opts [String] :username Filter the results by username. The query string should be comma separated and url encoded.
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;organizations\&quot; and/or \&quot;identities\&quot;.
    # @option opts [Boolean] :has_organization Filter the results by if the user has at least one organization assigned.
    # @return [UsersResponse]
    def get_users(opts = {})
      data, _status_code, _headers = get_users_with_http_info(opts)
      data
    end

    # Get users
    # The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter.  &lt;div&gt;   &lt;code&gt;read:users&lt;/code&gt; &lt;/div&gt; 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :user_id Filter the results by User ID. The query string should be comma separated and url encoded.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @option opts [String] :email Filter the results by email address. The query string should be comma separated and url encoded.
    # @option opts [String] :username Filter the results by username. The query string should be comma separated and url encoded.
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;organizations\&quot; and/or \&quot;identities\&quot;.
    # @option opts [Boolean] :has_organization Filter the results by if the user has at least one organization assigned.
    # @return [Array<(UsersResponse, Integer, Hash)>] UsersResponse data, response status code and response headers
    def get_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_users ...'
      end
      # resource path
      local_var_path = '/api/v1/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'next_token'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'has_organization'] = opts[:'has_organization'] if !opts[:'has_organization'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.get_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user's MFA configuration
    # Get a user’s MFA configuration.  <div>   <code>read:user_mfa</code> </div> 
    # @param user_id [String] The identifier for the user
    # @param [Hash] opts the optional parameters
    # @return [GetUserMfaResponse]
    def get_users_mfa(user_id, opts = {})
      data, _status_code, _headers = get_users_mfa_with_http_info(user_id, opts)
      data
    end

    # Get user&#39;s MFA configuration
    # Get a user’s MFA configuration.  &lt;div&gt;   &lt;code&gt;read:user_mfa&lt;/code&gt; &lt;/div&gt; 
    # @param user_id [String] The identifier for the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUserMfaResponse, Integer, Hash)>] GetUserMfaResponse data, response status code and response headers
    def get_users_mfa_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_users_mfa ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.get_users_mfa"
      end
      # resource path
      local_var_path = '/api/v1/users/{user_id}/mfa'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserMfaResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.get_users_mfa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users_mfa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh User Claims and Invalidate Cache
    # Refreshes the user's claims and invalidates the current cache.  <div>   <code>update:user_refresh_claims</code> </div> 
    # @param user_id [String] The id of the user whose claims needs to be updated.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def refresh_user_claims(user_id, opts = {})
      data, _status_code, _headers = refresh_user_claims_with_http_info(user_id, opts)
      data
    end

    # Refresh User Claims and Invalidate Cache
    # Refreshes the user&#39;s claims and invalidates the current cache.  &lt;div&gt;   &lt;code&gt;update:user_refresh_claims&lt;/code&gt; &lt;/div&gt; 
    # @param user_id [String] The id of the user whose claims needs to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def refresh_user_claims_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.refresh_user_claims ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.refresh_user_claims"
      end
      # resource path
      local_var_path = '/api/v1/users/{user_id}/refresh_claims'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.refresh_user_claims",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#refresh_user_claims\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset specific environment MFA for a user
    # Reset a specific environment MFA factor for a user.  <div>   <code>delete:user_mfa</code> </div> 
    # @param user_id [String] The identifier for the user
    # @param factor_id [String] The identifier for the MFA factor
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def reset_users_mfa(user_id, factor_id, opts = {})
      data, _status_code, _headers = reset_users_mfa_with_http_info(user_id, factor_id, opts)
      data
    end

    # Reset specific environment MFA for a user
    # Reset a specific environment MFA factor for a user.  &lt;div&gt;   &lt;code&gt;delete:user_mfa&lt;/code&gt; &lt;/div&gt; 
    # @param user_id [String] The identifier for the user
    # @param factor_id [String] The identifier for the MFA factor
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def reset_users_mfa_with_http_info(user_id, factor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.reset_users_mfa ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.reset_users_mfa"
      end
      # verify the required parameter 'factor_id' is set
      if @api_client.config.client_side_validation && factor_id.nil?
        fail ArgumentError, "Missing the required parameter 'factor_id' when calling UsersApi.reset_users_mfa"
      end
      # resource path
      local_var_path = '/api/v1/users/{user_id}/mfa/{factor_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'factor_id' + '}', CGI.escape(factor_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.reset_users_mfa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#reset_users_mfa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset all environment MFA for a user
    # Reset all environment MFA factors for a user.  <div>   <code>delete:user_mfa</code> </div> 
    # @param user_id [String] The identifier for the user
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def reset_users_mfa_all(user_id, opts = {})
      data, _status_code, _headers = reset_users_mfa_all_with_http_info(user_id, opts)
      data
    end

    # Reset all environment MFA for a user
    # Reset all environment MFA factors for a user.  &lt;div&gt;   &lt;code&gt;delete:user_mfa&lt;/code&gt; &lt;/div&gt; 
    # @param user_id [String] The identifier for the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def reset_users_mfa_all_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.reset_users_mfa_all ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.reset_users_mfa_all"
      end
      # resource path
      local_var_path = '/api/v1/users/{user_id}/mfa'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.reset_users_mfa_all",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#reset_users_mfa_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set User password
    # Set user password.  <div>   <code>update:user_passwords</code> </div> 
    # @param user_id [String] The identifier for the user
    # @param set_user_password_request [SetUserPasswordRequest] Password details.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def set_user_password(user_id, set_user_password_request, opts = {})
      data, _status_code, _headers = set_user_password_with_http_info(user_id, set_user_password_request, opts)
      data
    end

    # Set User password
    # Set user password.  &lt;div&gt;   &lt;code&gt;update:user_passwords&lt;/code&gt; &lt;/div&gt; 
    # @param user_id [String] The identifier for the user
    # @param set_user_password_request [SetUserPasswordRequest] Password details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def set_user_password_with_http_info(user_id, set_user_password_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.set_user_password ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.set_user_password"
      end
      # verify the required parameter 'set_user_password_request' is set
      if @api_client.config.client_side_validation && set_user_password_request.nil?
        fail ArgumentError, "Missing the required parameter 'set_user_password_request' when calling UsersApi.set_user_password"
      end
      # resource path
      local_var_path = '/api/v1/users/{user_id}/password'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(set_user_password_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.set_user_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#set_user_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user
    # Update a user record.  <div>   <code>update:users</code> </div> 
    # @param id [String] The user&#39;s id.
    # @param update_user_request [UpdateUserRequest] The user to update.
    # @param [Hash] opts the optional parameters
    # @return [UpdateUserResponse]
    def update_user(id, update_user_request, opts = {})
      data, _status_code, _headers = update_user_with_http_info(id, update_user_request, opts)
      data
    end

    # Update user
    # Update a user record.  &lt;div&gt;   &lt;code&gt;update:users&lt;/code&gt; &lt;/div&gt; 
    # @param id [String] The user&#39;s id.
    # @param update_user_request [UpdateUserRequest] The user to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateUserResponse, Integer, Hash)>] UpdateUserResponse data, response status code and response headers
    def update_user_with_http_info(id, update_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.update_user"
      end
      # verify the required parameter 'update_user_request' is set
      if @api_client.config.client_side_validation && update_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_user_request' when calling UsersApi.update_user"
      end
      # resource path
      local_var_path = '/api/v1/user'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.update_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update User Feature Flag Override
    # Update user feature flag override.  <div>   <code>update:user_feature_flags</code> </div> 
    # @param user_id [String] The identifier for the user
    # @param feature_flag_key [String] The identifier for the feature flag
    # @param value [String] Override value
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_user_feature_flag_override(user_id, feature_flag_key, value, opts = {})
      data, _status_code, _headers = update_user_feature_flag_override_with_http_info(user_id, feature_flag_key, value, opts)
      data
    end

    # Update User Feature Flag Override
    # Update user feature flag override.  &lt;div&gt;   &lt;code&gt;update:user_feature_flags&lt;/code&gt; &lt;/div&gt; 
    # @param user_id [String] The identifier for the user
    # @param feature_flag_key [String] The identifier for the feature flag
    # @param value [String] Override value
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_user_feature_flag_override_with_http_info(user_id, feature_flag_key, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user_feature_flag_override ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.update_user_feature_flag_override"
      end
      # verify the required parameter 'feature_flag_key' is set
      if @api_client.config.client_side_validation && feature_flag_key.nil?
        fail ArgumentError, "Missing the required parameter 'feature_flag_key' when calling UsersApi.update_user_feature_flag_override"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling UsersApi.update_user_feature_flag_override"
      end
      # resource path
      local_var_path = '/api/v1/users/{user_id}/feature_flags/{feature_flag_key}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'feature_flag_key' + '}', CGI.escape(feature_flag_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'value'] = value

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.update_user_feature_flag_override",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user_feature_flag_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Property values
    # Update property values.  <div>   <code>update:user_properties</code> </div> 
    # @param user_id [String] The identifier for the user
    # @param update_organization_properties_request [UpdateOrganizationPropertiesRequest] Properties to update.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_user_properties(user_id, update_organization_properties_request, opts = {})
      data, _status_code, _headers = update_user_properties_with_http_info(user_id, update_organization_properties_request, opts)
      data
    end

    # Update Property values
    # Update property values.  &lt;div&gt;   &lt;code&gt;update:user_properties&lt;/code&gt; &lt;/div&gt; 
    # @param user_id [String] The identifier for the user
    # @param update_organization_properties_request [UpdateOrganizationPropertiesRequest] Properties to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_user_properties_with_http_info(user_id, update_organization_properties_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user_properties ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.update_user_properties"
      end
      # verify the required parameter 'update_organization_properties_request' is set
      if @api_client.config.client_side_validation && update_organization_properties_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_organization_properties_request' when calling UsersApi.update_user_properties"
      end
      # resource path
      local_var_path = '/api/v1/users/{user_id}/properties'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_organization_properties_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.update_user_properties",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Property value
    # Update property value.  <div>   <code>update:user_properties</code> </div> 
    # @param user_id [String] The identifier for the user
    # @param property_key [String] The identifier for the property
    # @param value [String] The new property value
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_user_property(user_id, property_key, value, opts = {})
      data, _status_code, _headers = update_user_property_with_http_info(user_id, property_key, value, opts)
      data
    end

    # Update Property value
    # Update property value.  &lt;div&gt;   &lt;code&gt;update:user_properties&lt;/code&gt; &lt;/div&gt; 
    # @param user_id [String] The identifier for the user
    # @param property_key [String] The identifier for the property
    # @param value [String] The new property value
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_user_property_with_http_info(user_id, property_key, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user_property ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.update_user_property"
      end
      # verify the required parameter 'property_key' is set
      if @api_client.config.client_side_validation && property_key.nil?
        fail ArgumentError, "Missing the required parameter 'property_key' when calling UsersApi.update_user_property"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling UsersApi.update_user_property"
      end
      # resource path
      local_var_path = '/api/v1/users/{user_id}/properties/{property_key}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'property_key' + '}', CGI.escape(property_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'value'] = value

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.update_user_property",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
