=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi
  class WebhooksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Webhook
    # Create a webhook  <div>   <code>create:webhooks</code> </div> 
    # @param create_web_hook_request [CreateWebHookRequest] Webhook request specification.
    # @param [Hash] opts the optional parameters
    # @return [CreateWebhookResponse]
    def create_web_hook(create_web_hook_request, opts = {})
      data, _status_code, _headers = create_web_hook_with_http_info(create_web_hook_request, opts)
      data
    end

    # Create a Webhook
    # Create a webhook  &lt;div&gt;   &lt;code&gt;create:webhooks&lt;/code&gt; &lt;/div&gt; 
    # @param create_web_hook_request [CreateWebHookRequest] Webhook request specification.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateWebhookResponse, Integer, Hash)>] CreateWebhookResponse data, response status code and response headers
    def create_web_hook_with_http_info(create_web_hook_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.create_web_hook ...'
      end
      # verify the required parameter 'create_web_hook_request' is set
      if @api_client.config.client_side_validation && create_web_hook_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_web_hook_request' when calling WebhooksApi.create_web_hook"
      end
      # resource path
      local_var_path = '/api/v1/webhooks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_web_hook_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateWebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"WebhooksApi.create_web_hook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#create_web_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Webhook
    # Delete webhook  <div>   <code>delete:webhooks</code> </div> 
    # @param webhook_id [String] The webhook id.
    # @param [Hash] opts the optional parameters
    # @return [DeleteWebhookResponse]
    def delete_web_hook(webhook_id, opts = {})
      data, _status_code, _headers = delete_web_hook_with_http_info(webhook_id, opts)
      data
    end

    # Delete Webhook
    # Delete webhook  &lt;div&gt;   &lt;code&gt;delete:webhooks&lt;/code&gt; &lt;/div&gt; 
    # @param webhook_id [String] The webhook id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteWebhookResponse, Integer, Hash)>] DeleteWebhookResponse data, response status code and response headers
    def delete_web_hook_with_http_info(webhook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.delete_web_hook ...'
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling WebhooksApi.delete_web_hook"
      end
      # resource path
      local_var_path = '/api/v1/webhooks/{webhook_id}'.sub('{' + 'webhook_id' + '}', CGI.escape(webhook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteWebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"WebhooksApi.delete_web_hook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#delete_web_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Event
    # Returns an event  <div>   <code>read:events</code> </div> 
    # @param event_id [String] The event id.
    # @param [Hash] opts the optional parameters
    # @return [GetEventResponse]
    def get_event(event_id, opts = {})
      data, _status_code, _headers = get_event_with_http_info(event_id, opts)
      data
    end

    # Get Event
    # Returns an event  &lt;div&gt;   &lt;code&gt;read:events&lt;/code&gt; &lt;/div&gt; 
    # @param event_id [String] The event id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEventResponse, Integer, Hash)>] GetEventResponse data, response status code and response headers
    def get_event_with_http_info(event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.get_event ...'
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling WebhooksApi.get_event"
      end
      # resource path
      local_var_path = '/api/v1/events/{event_id}'.sub('{' + 'event_id' + '}', CGI.escape(event_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"WebhooksApi.get_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#get_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Event Types
    # Returns a list event type definitions  <div>   <code>read:event_types</code> </div> 
    # @param [Hash] opts the optional parameters
    # @return [GetEventTypesResponse]
    def get_event_types(opts = {})
      data, _status_code, _headers = get_event_types_with_http_info(opts)
      data
    end

    # List Event Types
    # Returns a list event type definitions  &lt;div&gt;   &lt;code&gt;read:event_types&lt;/code&gt; &lt;/div&gt; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEventTypesResponse, Integer, Hash)>] GetEventTypesResponse data, response status code and response headers
    def get_event_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.get_event_types ...'
      end
      # resource path
      local_var_path = '/api/v1/event_types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEventTypesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"WebhooksApi.get_event_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#get_event_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Webhooks
    # List webhooks  <div>   <code>read:webhooks</code> </div> 
    # @param [Hash] opts the optional parameters
    # @return [GetWebhooksResponse]
    def get_web_hooks(opts = {})
      data, _status_code, _headers = get_web_hooks_with_http_info(opts)
      data
    end

    # List Webhooks
    # List webhooks  &lt;div&gt;   &lt;code&gt;read:webhooks&lt;/code&gt; &lt;/div&gt; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetWebhooksResponse, Integer, Hash)>] GetWebhooksResponse data, response status code and response headers
    def get_web_hooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.get_web_hooks ...'
      end
      # resource path
      local_var_path = '/api/v1/webhooks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetWebhooksResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"WebhooksApi.get_web_hooks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#get_web_hooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Webhook
    # Update a webhook  <div>   <code>update:webhooks</code> </div> 
    # @param webhook_id [String] The webhook id.
    # @param update_web_hook_request [UpdateWebHookRequest] Update webhook request specification.
    # @param [Hash] opts the optional parameters
    # @return [UpdateWebhookResponse]
    def update_web_hook(webhook_id, update_web_hook_request, opts = {})
      data, _status_code, _headers = update_web_hook_with_http_info(webhook_id, update_web_hook_request, opts)
      data
    end

    # Update a Webhook
    # Update a webhook  &lt;div&gt;   &lt;code&gt;update:webhooks&lt;/code&gt; &lt;/div&gt; 
    # @param webhook_id [String] The webhook id.
    # @param update_web_hook_request [UpdateWebHookRequest] Update webhook request specification.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateWebhookResponse, Integer, Hash)>] UpdateWebhookResponse data, response status code and response headers
    def update_web_hook_with_http_info(webhook_id, update_web_hook_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.update_web_hook ...'
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling WebhooksApi.update_web_hook"
      end
      # verify the required parameter 'update_web_hook_request' is set
      if @api_client.config.client_side_validation && update_web_hook_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_web_hook_request' when calling WebhooksApi.update_web_hook"
      end
      # resource path
      local_var_path = '/api/v1/webhooks/{webhook_id}'.sub('{' + 'webhook_id' + '}', CGI.escape(webhook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_web_hook_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateWebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"WebhooksApi.update_web_hook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#update_web_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
