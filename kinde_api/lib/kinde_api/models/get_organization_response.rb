=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'date'
require 'time'

module KindeApi
  class GetOrganizationResponse
    # The unique identifier for the organization.
    attr_accessor :code

    # The organization's name.
    attr_accessor :name

    # A unique handle for the organization - can be used for dynamic callback urls.
    attr_accessor :handle

    # Whether the organization is the default organization.
    attr_accessor :is_default

    # The organization's external identifier - commonly used when migrating from or mapping to other systems.
    attr_accessor :external_id

    # If users become members of this organization when the org code is supplied during authentication.
    attr_accessor :is_auto_membership_enabled

    # The organization's logo URL.
    attr_accessor :logo

    # The organization's logo URL to be used for dark themes.
    attr_accessor :logo_dark

    # The organization's SVG favicon URL. Optimal format for most browsers
    attr_accessor :favicon_svg

    # The favicon URL to be used as a fallback in browsers that donâ€™t support SVG, add a PNG
    attr_accessor :favicon_fallback

    attr_accessor :link_color

    attr_accessor :background_color

    attr_accessor :button_color

    attr_accessor :button_text_color

    attr_accessor :link_color_dark

    attr_accessor :background_color_dark

    attr_accessor :button_text_color_dark

    attr_accessor :button_color_dark

    # The border radius for buttons. Value is px, Kinde transforms to rem for rendering
    attr_accessor :button_border_radius

    # The border radius for cards. Value is px, Kinde transforms to rem for rendering
    attr_accessor :card_border_radius

    # The border radius for inputs. Value is px, Kinde transforms to rem for rendering
    attr_accessor :input_border_radius

    # Whether the environment is forced into light mode, dark mode or user preference
    attr_accessor :theme_code

    # The color scheme for the environment used for meta tags based on the theme code
    attr_accessor :color_scheme

    # Date of organization creation in ISO 8601 format.
    attr_accessor :created_on

    # Deprecated - Use 'is_auto_membership_enabled' instead
    attr_accessor :is_allow_registrations

    # The name of the organization that will be used in emails
    attr_accessor :sender_name

    # The email address that will be used in emails. Requires custom SMTP to be set up.
    attr_accessor :sender_email

    attr_accessor :billing

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'code' => :'code',
        :'name' => :'name',
        :'handle' => :'handle',
        :'is_default' => :'is_default',
        :'external_id' => :'external_id',
        :'is_auto_membership_enabled' => :'is_auto_membership_enabled',
        :'logo' => :'logo',
        :'logo_dark' => :'logo_dark',
        :'favicon_svg' => :'favicon_svg',
        :'favicon_fallback' => :'favicon_fallback',
        :'link_color' => :'link_color',
        :'background_color' => :'background_color',
        :'button_color' => :'button_color',
        :'button_text_color' => :'button_text_color',
        :'link_color_dark' => :'link_color_dark',
        :'background_color_dark' => :'background_color_dark',
        :'button_text_color_dark' => :'button_text_color_dark',
        :'button_color_dark' => :'button_color_dark',
        :'button_border_radius' => :'button_border_radius',
        :'card_border_radius' => :'card_border_radius',
        :'input_border_radius' => :'input_border_radius',
        :'theme_code' => :'theme_code',
        :'color_scheme' => :'color_scheme',
        :'created_on' => :'created_on',
        :'is_allow_registrations' => :'is_allow_registrations',
        :'sender_name' => :'sender_name',
        :'sender_email' => :'sender_email',
        :'billing' => :'billing'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'code' => :'String',
        :'name' => :'String',
        :'handle' => :'String',
        :'is_default' => :'Boolean',
        :'external_id' => :'String',
        :'is_auto_membership_enabled' => :'Boolean',
        :'logo' => :'String',
        :'logo_dark' => :'String',
        :'favicon_svg' => :'String',
        :'favicon_fallback' => :'String',
        :'link_color' => :'GetEnvironmentResponseEnvironmentLinkColor',
        :'background_color' => :'GetEnvironmentResponseEnvironmentBackgroundColor',
        :'button_color' => :'GetEnvironmentResponseEnvironmentLinkColor',
        :'button_text_color' => :'GetEnvironmentResponseEnvironmentBackgroundColor',
        :'link_color_dark' => :'GetEnvironmentResponseEnvironmentLinkColor',
        :'background_color_dark' => :'GetEnvironmentResponseEnvironmentLinkColor',
        :'button_text_color_dark' => :'GetEnvironmentResponseEnvironmentLinkColor',
        :'button_color_dark' => :'GetEnvironmentResponseEnvironmentLinkColor',
        :'button_border_radius' => :'Integer',
        :'card_border_radius' => :'Integer',
        :'input_border_radius' => :'Integer',
        :'theme_code' => :'String',
        :'color_scheme' => :'String',
        :'created_on' => :'String',
        :'is_allow_registrations' => :'Boolean',
        :'sender_name' => :'String',
        :'sender_email' => :'String',
        :'billing' => :'GetOrganizationResponseBilling'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'handle',
        :'external_id',
        :'logo',
        :'logo_dark',
        :'favicon_svg',
        :'favicon_fallback',
        :'link_color',
        :'background_color',
        :'button_color',
        :'button_text_color',
        :'link_color_dark',
        :'background_color_dark',
        :'button_text_color_dark',
        :'button_color_dark',
        :'button_border_radius',
        :'card_border_radius',
        :'input_border_radius',
        :'is_allow_registrations',
        :'sender_name',
        :'sender_email',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KindeApi::GetOrganizationResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KindeApi::GetOrganizationResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'handle')
        self.handle = attributes[:'handle']
      end

      if attributes.key?(:'is_default')
        self.is_default = attributes[:'is_default']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'is_auto_membership_enabled')
        self.is_auto_membership_enabled = attributes[:'is_auto_membership_enabled']
      end

      if attributes.key?(:'logo')
        self.logo = attributes[:'logo']
      end

      if attributes.key?(:'logo_dark')
        self.logo_dark = attributes[:'logo_dark']
      end

      if attributes.key?(:'favicon_svg')
        self.favicon_svg = attributes[:'favicon_svg']
      end

      if attributes.key?(:'favicon_fallback')
        self.favicon_fallback = attributes[:'favicon_fallback']
      end

      if attributes.key?(:'link_color')
        self.link_color = attributes[:'link_color']
      end

      if attributes.key?(:'background_color')
        self.background_color = attributes[:'background_color']
      end

      if attributes.key?(:'button_color')
        self.button_color = attributes[:'button_color']
      end

      if attributes.key?(:'button_text_color')
        self.button_text_color = attributes[:'button_text_color']
      end

      if attributes.key?(:'link_color_dark')
        self.link_color_dark = attributes[:'link_color_dark']
      end

      if attributes.key?(:'background_color_dark')
        self.background_color_dark = attributes[:'background_color_dark']
      end

      if attributes.key?(:'button_text_color_dark')
        self.button_text_color_dark = attributes[:'button_text_color_dark']
      end

      if attributes.key?(:'button_color_dark')
        self.button_color_dark = attributes[:'button_color_dark']
      end

      if attributes.key?(:'button_border_radius')
        self.button_border_radius = attributes[:'button_border_radius']
      end

      if attributes.key?(:'card_border_radius')
        self.card_border_radius = attributes[:'card_border_radius']
      end

      if attributes.key?(:'input_border_radius')
        self.input_border_radius = attributes[:'input_border_radius']
      end

      if attributes.key?(:'theme_code')
        self.theme_code = attributes[:'theme_code']
      end

      if attributes.key?(:'color_scheme')
        self.color_scheme = attributes[:'color_scheme']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'is_allow_registrations')
        self.is_allow_registrations = attributes[:'is_allow_registrations']
      end

      if attributes.key?(:'sender_name')
        self.sender_name = attributes[:'sender_name']
      end

      if attributes.key?(:'sender_email')
        self.sender_email = attributes[:'sender_email']
      end

      if attributes.key?(:'billing')
        self.billing = attributes[:'billing']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      theme_code_validator = EnumAttributeValidator.new('String', ["light", "dark", "user_preference"])
      return false unless theme_code_validator.valid?(@theme_code)
      color_scheme_validator = EnumAttributeValidator.new('String', ["light", "dark", "light dark"])
      return false unless color_scheme_validator.valid?(@color_scheme)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] theme_code Object to be assigned
    def theme_code=(theme_code)
      validator = EnumAttributeValidator.new('String', ["light", "dark", "user_preference"])
      unless validator.valid?(theme_code)
        fail ArgumentError, "invalid value for \"theme_code\", must be one of #{validator.allowable_values}."
      end
      @theme_code = theme_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] color_scheme Object to be assigned
    def color_scheme=(color_scheme)
      validator = EnumAttributeValidator.new('String', ["light", "dark", "light dark"])
      unless validator.valid?(color_scheme)
        fail ArgumentError, "invalid value for \"color_scheme\", must be one of #{validator.allowable_values}."
      end
      @color_scheme = color_scheme
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          code == o.code &&
          name == o.name &&
          handle == o.handle &&
          is_default == o.is_default &&
          external_id == o.external_id &&
          is_auto_membership_enabled == o.is_auto_membership_enabled &&
          logo == o.logo &&
          logo_dark == o.logo_dark &&
          favicon_svg == o.favicon_svg &&
          favicon_fallback == o.favicon_fallback &&
          link_color == o.link_color &&
          background_color == o.background_color &&
          button_color == o.button_color &&
          button_text_color == o.button_text_color &&
          link_color_dark == o.link_color_dark &&
          background_color_dark == o.background_color_dark &&
          button_text_color_dark == o.button_text_color_dark &&
          button_color_dark == o.button_color_dark &&
          button_border_radius == o.button_border_radius &&
          card_border_radius == o.card_border_radius &&
          input_border_radius == o.input_border_radius &&
          theme_code == o.theme_code &&
          color_scheme == o.color_scheme &&
          created_on == o.created_on &&
          is_allow_registrations == o.is_allow_registrations &&
          sender_name == o.sender_name &&
          sender_email == o.sender_email &&
          billing == o.billing
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [code, name, handle, is_default, external_id, is_auto_membership_enabled, logo, logo_dark, favicon_svg, favicon_fallback, link_color, background_color, button_color, button_text_color, link_color_dark, background_color_dark, button_text_color_dark, button_color_dark, button_border_radius, card_border_radius, input_border_radius, theme_code, color_scheme, created_on, is_allow_registrations, sender_name, sender_email, billing].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KindeApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
