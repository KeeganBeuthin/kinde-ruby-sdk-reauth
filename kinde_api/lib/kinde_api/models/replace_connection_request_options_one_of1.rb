=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'date'
require 'time'

module KindeApi
  # SAML connection options (e.g., Cloudflare SAML).
  class ReplaceConnectionRequestOptionsOneOf1
    # List of domains to restrict authentication.
    attr_accessor :home_realm_domains

    # SAML Entity ID.
    attr_accessor :saml_entity_id

    # Assertion Consumer Service URL.
    attr_accessor :saml_acs_url

    # URL for the IdP metadata.
    attr_accessor :saml_idp_metadata_url

    # Attribute key for the user’s email.
    attr_accessor :saml_email_key_attr

    # Attribute key for the user’s first name.
    attr_accessor :saml_first_name_key_attr

    # Attribute key for the user’s last name.
    attr_accessor :saml_last_name_key_attr

    # Create user if they don’t exist.
    attr_accessor :is_create_missing_user

    # Certificate for signing SAML requests.
    attr_accessor :saml_signing_certificate

    # Private key associated with the signing certificate.
    attr_accessor :saml_signing_private_key

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'home_realm_domains' => :'home_realm_domains',
        :'saml_entity_id' => :'saml_entity_id',
        :'saml_acs_url' => :'saml_acs_url',
        :'saml_idp_metadata_url' => :'saml_idp_metadata_url',
        :'saml_email_key_attr' => :'saml_email_key_attr',
        :'saml_first_name_key_attr' => :'saml_first_name_key_attr',
        :'saml_last_name_key_attr' => :'saml_last_name_key_attr',
        :'is_create_missing_user' => :'is_create_missing_user',
        :'saml_signing_certificate' => :'saml_signing_certificate',
        :'saml_signing_private_key' => :'saml_signing_private_key'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'home_realm_domains' => :'Array<String>',
        :'saml_entity_id' => :'String',
        :'saml_acs_url' => :'String',
        :'saml_idp_metadata_url' => :'String',
        :'saml_email_key_attr' => :'String',
        :'saml_first_name_key_attr' => :'String',
        :'saml_last_name_key_attr' => :'String',
        :'is_create_missing_user' => :'Boolean',
        :'saml_signing_certificate' => :'String',
        :'saml_signing_private_key' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KindeApi::ReplaceConnectionRequestOptionsOneOf1` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KindeApi::ReplaceConnectionRequestOptionsOneOf1`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'home_realm_domains')
        if (value = attributes[:'home_realm_domains']).is_a?(Array)
          self.home_realm_domains = value
        end
      end

      if attributes.key?(:'saml_entity_id')
        self.saml_entity_id = attributes[:'saml_entity_id']
      end

      if attributes.key?(:'saml_acs_url')
        self.saml_acs_url = attributes[:'saml_acs_url']
      end

      if attributes.key?(:'saml_idp_metadata_url')
        self.saml_idp_metadata_url = attributes[:'saml_idp_metadata_url']
      end

      if attributes.key?(:'saml_email_key_attr')
        self.saml_email_key_attr = attributes[:'saml_email_key_attr']
      end

      if attributes.key?(:'saml_first_name_key_attr')
        self.saml_first_name_key_attr = attributes[:'saml_first_name_key_attr']
      end

      if attributes.key?(:'saml_last_name_key_attr')
        self.saml_last_name_key_attr = attributes[:'saml_last_name_key_attr']
      end

      if attributes.key?(:'is_create_missing_user')
        self.is_create_missing_user = attributes[:'is_create_missing_user']
      end

      if attributes.key?(:'saml_signing_certificate')
        self.saml_signing_certificate = attributes[:'saml_signing_certificate']
      end

      if attributes.key?(:'saml_signing_private_key')
        self.saml_signing_private_key = attributes[:'saml_signing_private_key']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          home_realm_domains == o.home_realm_domains &&
          saml_entity_id == o.saml_entity_id &&
          saml_acs_url == o.saml_acs_url &&
          saml_idp_metadata_url == o.saml_idp_metadata_url &&
          saml_email_key_attr == o.saml_email_key_attr &&
          saml_first_name_key_attr == o.saml_first_name_key_attr &&
          saml_last_name_key_attr == o.saml_last_name_key_attr &&
          is_create_missing_user == o.is_create_missing_user &&
          saml_signing_certificate == o.saml_signing_certificate &&
          saml_signing_private_key == o.saml_signing_private_key
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [home_realm_domains, saml_entity_id, saml_acs_url, saml_idp_metadata_url, saml_email_key_attr, saml_first_name_key_attr, saml_last_name_key_attr, is_create_missing_user, saml_signing_certificate, saml_signing_private_key].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KindeApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
